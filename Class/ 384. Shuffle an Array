Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.
Implement the Solution class:
Solution(int[] nums) Initializes the object with the integer array nums.
int[] reset() Resets the array to its original configuration and returns it.
int[] shuffle() Returns a random shuffling of the array.

Solution Description:
Create two array to help us solve this problem. One is used to record the original data, another is used to record the shuffled data.
When we want to shuffle the array, we put all index in a list and random pick.

Code:
class Solution {
    int[] original;
    int[] modified;
    public Solution(int[] nums) {
        original = new int[nums.length];
        modified = new int[nums.length];
        for(int i = 0; i<nums.length; i++){
            original[i] = nums[i];
            modified[i] = nums[i];
        }
    }
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
        for(int i = 0; i<original.length; i++){
            modified[i] = original[i];
        }
        return modified;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
        List<Integer> list = new ArrayList();
        for(int i = 0; i<original.length; i++){
            list.add(i);
        }
        Random r = new Random();
        int curIndex = 0;
        while(list.size()!=0){
            int newIndex = r.nextInt(list.size());
            modified[list.get(newIndex)] = original[curIndex++];
            list.remove(newIndex);
        }
        return modified;
    }
}

 
Result:
Runtime: 74 ms, faster than 79.19% of Java online submissions for Shuffle an Array.
Memory Usage: 46.9 MB, less than 98.16% of Java online submissions for Shuffle an Array.
