We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed),
for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.
For example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid RLE of arr.
Given a run-length encoded array, design an iterator that iterates through it.
Implement the RLEIterator class:
RLEIterator(int[] encoded) Initializes the object with the encoded array encoded.
int next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust, return -1 instead.

class RLEIterator {
    int index;
    List<Integer> list ;
    public RLEIterator(int[] encoding) {
        index = 0;
        list = new ArrayList();
        for(int i : encoding){
            list.add(i);
        }
    }
    
    public int next(int n) {
        while(index<list.size()){
            if(list.get(index)>n){
                list.set(index,list.get(index)-n);
                return list.get(index+1);
            }else if(list.get(index)==n){
                list.set(index,0);
                index += 2;
                return list.get(index-1);
            }else{
                while(n>list.get(index)){
                    n -= list.get(index);
                    index+=2;
                    if(index>=list.size()){
                        return -1;
                    }
                }
                return next(n);
            }
        }
        return -1;
    }
}

/**
 * Your RLEIterator object will be instantiated and called as such:
 * RLEIterator obj = new RLEIterator(encoding);
 * int param_1 = obj.next(n);
 */
 
 Result:
 Runtime: 5 ms, faster than 93.82% of Java online submissions for RLE Iterator.
Memory Usage: 39.4 MB, less than 68.14% of Java online submissions for RLE Iterator.
