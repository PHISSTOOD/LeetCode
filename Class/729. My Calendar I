You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.
A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).
The event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), 
the range of real numbers x such that start <= x < end.
Implement the MyCalendar class:
MyCalendar() Initializes the calendar object.
boolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. 
Otherwise, return false and do not add the event to the calendar.



class MyCalendar {
    List<Integer> startList;
    List<Integer> endList;
    public MyCalendar() {
        startList = new ArrayList();
        endList =new ArrayList();
    }
    
    public boolean book(int start, int end) {
        if(startList.size()==0){
            startList.add(start);
            endList.add(end);
            return true;
        }else if(start>=startList.get(startList.size()-1)){
            if(start>=endList.get(endList.size()-1)){
                startList.add(start);
                endList.add(end);
                return true;
            }else{
                return false;
            }
        }else if(start<=startList.get(0)){
            if(end<=startList.get(0)){
                startList.add(0,start);
                endList.add(0,end);
                return true;
            }else{
                return false;
            }
        }else{
            int index = binarySearch(start);
            if(index==-1){
                return false;
            }else{
                if(start>=endList.get(index-1) && end<=startList.get(index)){
                    startList.add(index,start);
                    endList.add(index,end);
                    return true;
                }else{
                    return false;
                }
            }
        }
    }
    
    public int binarySearch(int start){
        int left = 0;
        int right = startList.size()-1;
        while(left<right){
            int mid = (left+right)/2;
            if(startList.get(mid)==start){
                return -1;
            }else if(startList.get(mid)>start){
                right = mid;
            }else{
                left = mid+1;
            }
        }
        return right;
    }
}

/**
 * Your MyCalendar object will be instantiated and called as such:
 * MyCalendar obj = new MyCalendar();
 * boolean param_1 = obj.book(start,end);
 */
 
 Result:
 Runtime: 16 ms, faster than 97.07% of Java online submissions for My Calendar I.
Memory Usage: 39.3 MB, less than 96.35% of Java online submissions for My Calendar I.
