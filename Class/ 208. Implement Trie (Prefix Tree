Implement a trie with insert, search, and startsWith methods.

class Trie {
    List<String> st;
    /** Initialize your data structure here. */
    public Trie() {
        this.st = new ArrayList();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        this.st.add(word);
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        if(this.st.contains(word))
        {
            return true;
        }else
        {
            return false;
        }
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        int len = prefix.length();
        for(int i = 0;i<this.st.size();i++)
        {
            if(this.st.get(i).length()>=len)
            {
                String sub = this.st.get(i).substring(0,len);
                if(sub.equals(prefix))
                {
                    return true;
                }
            }
        }
        return false;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
