Implement a trie with insert, search, and startsWith methods.


# Java Solution:

class Trie {
    List<String> st;
    /** Initialize your data structure here. */
    public Trie() {
        this.st = new ArrayList();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        this.st.add(word);
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        if(this.st.contains(word))
        {
            return true;
        }else
        {
            return false;
        }
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        int len = prefix.length();
        for(int i = 0;i<this.st.size();i++)
        {
            if(this.st.get(i).length()>=len)
            {
                String sub = this.st.get(i).substring(0,len);
                if(sub.equals(prefix))
                {
                    return true;
                }
            }
        }
        return false;
    }
}

Result:



C++ Solution:
class Trie {
public:
    /** Initialize your data structure here. */
    static const int childNum = 26;
    
    struct TrieNode{
        bool isEnd;
        struct TrieNode* children[childNum];
    };
    
    TrieNode* root;
    
    TrieNode* createNode(){
        TrieNode* cur = new TrieNode();
        cur->isEnd = false;
        for(int i = 0;i < childNum;i++){
            cur->children[i] = nullptr;
        }
        return cur;
    }
    
    Trie() {
        root = createNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        auto* temp = root;
        for(int i = 0;i < word.size();i++){
            int index = word[i] - 'a';
            if(temp->children[index] == nullptr){
                temp->children[index] = createNode();
            }
            temp = temp->children[index];
        }
        temp->isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        auto temp = root;
        for(int i = 0;i < word.size();i++){
            if(temp->children[word[i]-'a'] == nullptr){
                return false;
            }
            temp = temp->children[word[i] - 'a'];
        }
        return temp->isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        auto temp = root;
        for(int i = 0;i < prefix.size();i++){
            if(temp->children[prefix[i] - 'a'] == nullptr){
                return false;
            }
            temp = temp->children[prefix[i] - 'a'];
        }
        return true;
    }
};

Result:

Runtime: 52 ms, faster than 83.98% of C++ online submissions for Implement Trie (Prefix Tree).
Memory Usage: 44.9 MB, less than 72.14% of C++ online submissions for Implement Trie (Prefix Tree).

    
