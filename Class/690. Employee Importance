You are given a data structure of employee information, which includes the employee's unique id, 
his importance value and his direct subordinates' id.
For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. 
They have importance value 15, 10 and 5, respectively. 
Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], 
and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.
Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all his subordinates.

/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    Map<Integer, Employee> emap = new HashMap();
    public int getImportance(List<Employee> employees, int queryid) {
        for(Employee e : employees)
        {
            emap.put(e.id,e);
        }
        return dfs(queryid);
    }
    private int dfs(int id)
    {
        Employee em = emap.get(id);
        int result = em.importance;
        for(Integer subid : em.subordinates)
        {
            result += dfs(subid);
        }
        return result;
    }
}


Runtime: 5 ms, faster than 99.35% of Java online submissions for Employee Importance.
Memory Usage: 46.9 MB, less than 95.24% of Java online submissions for Employee Importance.
