Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.
Implement the TimeMap class:
TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. 
If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".
Solution Description:
using binary search to speed up search time

Code:
class TimeMap {
    HashMap<String,List<Integer>> map;
    HashMap<String,String> KV;
    /** Initialize your data structure here. */
    public TimeMap() {
        map = new HashMap();
        KV = new HashMap();
    }
    
    public void set(String key, String value, int timestamp) {
        if(map.containsKey(key)){
            map.get(key).add(timestamp);
        }else{
            List<Integer> list = new ArrayList();
            list.add(timestamp);
            map.put(key,list);
        }
        StringBuilder sb = new StringBuilder();
        sb.append(key);
        sb.append('_');
        sb.append(timestamp);
        KV.put(sb.toString(),value);
    }
    
    public String get(String key, int timestamp) {
        if(!map.containsKey(key)){
            return "";
        }else{
            int cur = binarySearch(map.get(key),timestamp);
            if(cur == -1){
                return "";
            }else{
                cur = map.get(key).get(cur);
                StringBuilder sb = new StringBuilder();
                sb.append(key);
                sb.append('_');
                sb.append(cur);
                return KV.get(sb.toString());
            }
        }
    }
    
    public int binarySearch(List<Integer> list,int t){
        int l = 0,r = list.size() - 1,ind = -1;
        if(r == -1) return r;
        while(l <= r){
            int mid = l + (r - l)/2;
            int x = list.get(mid);
            if(x == t) return mid;
            else if(x > t) r = mid - 1;
            else {
                l = mid + 1;
                ind = mid;
            }
        }
        return ind;
    }
}

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key,value,timestamp);
 * String param_2 = obj.get(key,timestamp);
 */
 
 result:
 Runtime: 394 ms, faster than 25.11% of Java online submissions for Time Based Key-Value Store.
Memory Usage: 224.4 MB, less than 29.66% of Java online submissions for Time Based Key-Value Store.
