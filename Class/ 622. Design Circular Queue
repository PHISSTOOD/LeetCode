Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on 
FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called "Ring Buffer".
One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, 
we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.
Implementation the MyCircularQueue class:
MyCircularQueue(k) Initializes the object with the size of the queue to be k.
int Front() Gets the front item from the queue. If the queue is empty, return -1.
int Rear() Gets the last item from the queue. If the queue is empty, return -1.
boolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.
boolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.
boolean isEmpty() Checks whether the circular queue is empty or not.
boolean isFull() Checks whether the circular queue is full or not.
You must solve the problem without using the built-in queue data structure in your programming language. 

Solution Description:
The implemetation of circular queue is using array to restore the numbers and using front and rear to record the position of front and rear, then using another number count 
to record how many numbers in the queue.

Code:
class MyCircularQueue {
    
    public int front = -1;
    public int rear = -1;
    public int count = 0;
    public int[] array;

    /** Initialize your data structure here. Set the size of the queue to be k. */
    public MyCircularQueue(int k) {
        array = new int[k];
        front = 0;
        rear = 0;
    }
    
    /** Insert an element into the circular queue. Return true if the operation is successful. */
    public boolean enQueue(int value) {
        if(count==array.length){
            return false;
        }
        array[rear] = value;
        rear++;
        if(rear>=array.length){
            rear = 0;
        }
        count++;
        return true;
    }
    
    /** Delete an element from the circular queue. Return true if the operation is successful. */
    public boolean deQueue() {
        if(count<=0){
            return false;
        }
        front++;
        if(front>=array.length){
            front= 0;
        }
        count--;
        return true;
    }
    
    /** Get the front item from the queue. */
    public int Front() {
        if(count==0){
            return -1;
        }
        return array[front];
    }
    
    /** Get the last item from the queue. */
    public int Rear() {
        if(count==0){
            return -1;
        }
        if(rear==0){
            return array[array.length-1];
        }else{
            return array[rear-1];
        }
    }
    
    /** Checks whether the circular queue is empty or not. */
    public boolean isEmpty() {
        if(count==0){
            return true;
        }
        return false;
    }
    
    /** Checks whether the circular queue is full or not. */
    public boolean isFull() {
        if(count==array.length){
            return true;
        }
        return false;
    }
}

Result:
Runtime: 4 ms, faster than 97.55% of Java online submissions for Design Circular Queue.
Memory Usage: 39.2 MB, less than 91.85% of Java online submissions for Design Circular Queue.
