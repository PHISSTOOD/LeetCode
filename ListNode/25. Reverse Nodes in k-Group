Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
k is a positive integer and is less than or equal to the length of the linked list. 
If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k==1){
            return head;
        }
        ListNode dum = null;
        ListNode cur =head;
        ListNode next = head;
        int count= 0;
        while(next!=null && count<k){
            next = cur.next;
            cur.next = dum;
            dum = cur;
            cur = next;
            count++;
        }
        if(count==k){
            head.next = reverseKGroup(cur,k);
        }
        if(count>0 && count < k){
            return reverseKGroup(dum,count);
        }
        return dum;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Reverse Nodes in k-Group.
Memory Usage: 39.3 MB, less than 52.56% of Java online submissions for Reverse Nodes in k-Group.
