Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {

    /** @param head The linked list's head.
        Note that the head is guaranteed to be not null, so it contains at least one node. */
    ListNode head;
    int length;
    public Solution(ListNode head) {
        this.head = head;
        ListNode cur = head;
        int len = 0;
        while(cur!=null){
            len++;
            cur = cur.next;
        }
        this.length = len-1;
    }
    
    /** Returns a random node's value. */
    public int getRandom() {
        int ran = (int)(Math.random()*(length+1-0) + 0);
        ListNode cur = head;
        for(int i = 0;i<ran;i++){
            cur = cur.next;
        }
        return cur.val;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(head);
 * int param_1 = obj.getRandom();
 */
 
Runtime: 13 ms, faster than 63.65% of Java online submissions for Linked List Random Node.
Memory Usage: 40 MB, less than 73.33% of Java online submissions for Linked List Random Node.
