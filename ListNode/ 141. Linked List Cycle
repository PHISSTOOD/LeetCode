Given a linked list, determine if it has a cycle in it.
To represent a cycle in the given linked list, 
we use an integer pos which representsthe position (0-indexed) in the linked list where tail connects to. 
If pos is -1, then there is no cycle in the linked list.

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
/*public class Solution {
    public boolean hasCycle(ListNode head) {
        HashSet<ListNode> set = new HashSet();
        ListNode cur = head;
        while(cur!=null)
        {
            if(set.contains(cur))
            {
                return true;
            }else
            {
                set.add(cur);
                cur = cur.next;
            }
        }
        return false;
    }
}*/

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head==null || head.next == null)
        {
            return false;
        }
        ListNode slow = head;
        ListNode fast = head.next;
        while(slow != fast)
        {
            if(fast==null || fast.next==null)
            {
                return false;
            }
            slow = slow.next;
            fast = fast.next.next;
        }
        return true;
    }
}
