You are given a doubly linked list which in addition to the next and previous pointers, 
it could have a child pointer, which may or may not point to a separate doubly linked list. 
These child lists may have one or more children of their own, 
and so on, to produce a multilevel data structure, as shown in the example below.
Flatten the list so that all the nodes appear in a single-level, doubly linked list. 
You are given the head of the first level of the list.

/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;
};
*/
class Solution {
    public Node flatten(Node head) {
        if(head==null)
        {
            return null;
        }
        Node cur = head;
        head = flat(cur);
        return head;
    }
    private Node flat(Node cur)
    {
        if(cur.child!=null)
        {
            Node curl = null;
            if(cur.next!=null)
            {
                curl = cur.next;
            }
            cur.next = flat(cur.child);
            cur.next.prev = cur;
            cur.child = null;
            if(curl!=null)
            {
                Node curt = tail(cur);
                curt.next = flat(curl);
                curt.next.prev = curt;
            }
        }else if(cur.next!=null)
        {
            //Node curl = cur.next;
            cur.next = flat(cur.next);
            cur.next.prev = cur;
        }
        return cur;
    }
    private Node tail(Node cur)
    {
        while(cur.next!=null)
        {
            cur = cur.next;
        }
        return cur;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Flatten a Multilevel Doubly Linked List.
Memory Usage: 35.6 MB, less than 100.00% of Java online submissions for Flatten a Multilevel Doubly Linked List.

