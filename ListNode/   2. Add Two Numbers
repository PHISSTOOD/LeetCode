You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int flag = 0;
        ListNode head = new ListNode(0);
        ListNode cur = head;
        while(l1!=null || l2!=null)
        {
            ListNode newnode = new ListNode(0);
            int num1 = l1!=null ? l1.val:0;
            int num2 = l2!=null ? l2.val:0;
            int sum = num1+num2+flag;
            flag = sum/10;
            cur.next = new ListNode(sum%10);
            cur = cur.next;
            if(l1!=null) l1 = l1.next;
            if(l2!=null) l2 = l2.next;
        }
        if(flag==1)
        {
            cur.next =  new ListNode(1);
        }
        return head.next;
    }
}
