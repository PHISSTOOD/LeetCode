Given an integer array nums, return the number of all the arithmetic subsequences of nums.
A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.
For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.
For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.
A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.
For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
The test cases are generated so that the answer fits in 32-bit integer.


Solution Description:
For this problem, using dynamic programming for this problem. Create a List whose element is a map to help us record. For each map in list, it record the index th number's number
For each number n in nums, we just need to iterate the map of the numbers in front of n, if the map contains the key which equals n - nums[j], we add it.

Code:
class Solution {
    public int numberOfArithmeticSlices(int[] nums) {
        if(nums==null||nums.length<3) return 0;
        List<Map<Integer,Integer>> list = new ArrayList<Map<Integer,Integer>>();
        int result = 0;
        for(int i = 1; i<nums.length; i++){
            Map<Integer,Integer> map = new HashMap<Integer,Integer>();
            for(int j = 0; j<i; j++){
                if((long)nums[i]-(long)nums[j]>Integer.MAX_VALUE) continue;
                if((long)nums[i]-(long)nums[j]<Integer.MIN_VALUE) continue;
                int dif=nums[i]-nums[j];
                if(j==0){
                     map.put(dif,1);
                }
                if(j>=1){
                    Map<Integer,Integer> temp = list.get(j-1);
                    int sum = 0;
                    if(temp.containsKey(dif)){
                        sum += temp.get(dif);
                    }
                    result += sum;
                    if(map.containsKey(dif)){
                        map.put(dif,sum+map.get(dif)+1);
                    }else{
                        map.put(dif,sum+1);
                    }
                }
            }
            list.add(map);
        }
        return result;
    }
}

Result:
Runtime: 155 ms, faster than 78.52% of Java online submissions for Arithmetic Slices II - Subsequence.
Memory Usage: 85.8 MB, less than 77.27% of Java online submissions for Arithmetic Slices II - Subsequence.
