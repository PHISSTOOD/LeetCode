We write the integers of A and B (in the order they are given) on two separate horizontal lines.
Now, we may draw connecting lines: a straight line connecting two numbers A[i] and B[j] such that:

A[i] == B[j];
The line we draw does not intersect any other connecting (non-horizontal) line.
Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.

Return the maximum number of connecting lines we can draw in this way

class Solution {
    public int maxUncrossedLines(int[] A, int[] B) {
        int[][] dp = new int[A.length+1][B.length+1];
        for(int i = 0;i<=A.length;i++)
        {
            for(int j = 0;j<=B.length;j++)
            {
                if(i==0 || j==0)
                {
                    dp[i][j] = 0;
                }else if(A[i-1]==B[j-1])
                {
                    dp[i][j] = dp[i-1][j-1]+1;
                }else
                {
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        return dp[A.length][B.length];
    }
}

Runtime: 5 ms, faster than 46.29% of Java online submissions for Uncrossed Lines.
Memory Usage: 35.5 MB, less than 100.00% of Java online submissions for Uncrossed Lines.
