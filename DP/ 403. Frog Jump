A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. 
The frog can jump on a stone, but it must not jump into the water.
Given a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. 
Initially, the frog is on the first stone and assumes the first jump must be 1 unit.
If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.

class Solution {
    private HashMap<Integer, HashSet> checked = new HashMap<>();
    public boolean canCross(int[] stones) {
        for (int i = 0; i < stones.length; i++){
            checked.put(stones[i], new HashSet<>());
        }
        return jump(0, 1, stones[stones.length - 1]);
    }

    private boolean jump(int current, int k, int last) {
        if (current == last) return true;
	    // skip if we have checked this k at the current stone
        if (k <= 0 || checked.get(current).contains(k)) return false;
        int next = current + k;
        if (checked.containsKey(next)) {
            if (jump(next, k + 1, last) || jump(next, k, last) || jump(next, k - 1, last)) return true;
        }
        checked.get(current).add(k);
        return false;
    }
}

Result:
Runtime: 8 ms, faster than 98.85% of Java online submissions for Frog Jump.
Memory Usage: 41.1 MB, less than 96.09% of Java online submissions for Frog Jump.
