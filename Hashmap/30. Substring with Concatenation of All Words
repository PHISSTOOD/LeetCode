You are given a string, s, and a list of words, words, that are all of the same length. 
Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once 
and without any intervening characters.

class Solution {
    int wl;
    int cl;
    Map<String,Integer>wds;
    Map<String,Integer>used;
    List ans;
    
    public List<Integer> findSubstring(String s, String[] words) {
       if(s.length()==0|words.length ==0)
       {
           return Collections.emptyList();
       }
        wl = words[0].length();
        cl = wl * words.length;
        wds = new HashMap<>(words.length);
        ans = new LinkedList<>();
        for(int i = 0;i<words.length;i++)
        {
            int cnt = wds.getOrDefault(words[i],0);
            wds.put(words[i],cnt+1);
        }
        for(int i = 0;i<wl;i++)
        {
            handle(s,i);
        }
        return ans;
    }
    private void handle(String s,int start)
    {
        used = new HashMap<>(wds.size());
        int i = start;
        int j = start;
        while(j<=s.length()-wl)
        {
            if(i>s.length()-cl)
            {
                return;
            }
            String wd = s.substring(j,j+wl);
            if(wds.containsKey(wd))
            {
                int total = wds.get(wd);
                int cnt = used.getOrDefault(wd,0);
                if(cnt<total)
                {
                    used.put(wd,cnt+1);
                    j +=wl;
                    if(j-i ==cl)
                    {
                        ans.add(i);
                        String first = s.substring(i,i+wl);
                        used.put(first,used.get(first)-1);
                        i +=wl;
                    }
                }
                else
                {
                    int offset = s.substring(i,j).indexOf(wd);
                    for(int k = i;k+wl<=offset;k +=wl)
                    {
                        String preWd = s.substring(k,k+wl);
                        used.put(preWd,used.get(preWd)-1);
                    }
                    i += wl+offset;
                    j +=wl;
                }
            }
            else
            {
                j += wl;
                i = j;
                used = new HashMap<>(wds.size());
            }
        }
    }
}
