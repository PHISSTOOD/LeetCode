Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.
Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.
Notice that you can return the vertices in any order.

Solution Description:
Add those node whose inderee is 0 to a new arraylist.

Code:
class Solution {
    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {
        int[] inDegree =new int[n];
        for(List<Integer> edge : edges){
            inDegree[edge.get(1)]++;
        }
        
        List<Integer> result = new ArrayList();
        for(int i = 0; i<n; i++){
            if(inDegree[i]==0){
                result.add(i);
            }
        }
        return result;
    }
}

Result:
Runtime: 9 ms, faster than 90.14% of Java online submissions for Minimum Number of Vertices to Reach All Nodes.
Memory Usage: 76.9 MB, less than 89.17% of Java online submissions for Minimum Number of Vertices to Reach All Nodes.
