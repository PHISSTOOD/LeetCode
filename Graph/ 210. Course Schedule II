There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. 
You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. 
If it is impossible to finish all courses, return an empty array.

Solution Description:
Using array, array of arraylist and queue to solve this problem. Creating a array to stroe the indegree of each node, and using array of arraylist to represent the graph.
This is a dericted graph, for each edge, n point m, means study m require study n first. 

Code:
class Solution {
    public int[] findOrder(int n, int[][] prerequisites) {
        List<Integer>[] graph = new ArrayList[n];
        int[] degree = new int[n];
        for(int i = 0; i<n; i++){
            graph[i] = new ArrayList();
        }
        for(int[] i: prerequisites){
            graph[i[1]].add(i[0]);
            degree[i[0]]++;
        }
        Queue<Integer> queue = new LinkedList();
        int index = 0;
        int[] result = new int[n];
        for(int i = 0; i<n; i++){
            if(degree[i]==0){
                queue.offer(i);
                result[index++] = i;
            }
        }
        while(!queue.isEmpty() && index<n){
            int cur = queue.poll();
            for(int i :graph[cur]){
                degree[i]--;
                if(degree[i]==0){
                    queue.offer(i);
                    result[index++] = i;
                }
            }
        }
        if(index==n){
            return result;
        }else{
            return new int[0];
        }
    }
}

Result:
Runtime: 3 ms, faster than 95.72% of Java online submissions for Course Schedule II.
Memory Usage: 40 MB, less than 72.58% of Java online submissions for Course Schedule II.
