You are given an array of strings equations that represent relationships between variables 
where each string equations[i] is of length 4 and takes one of two different forms:"xi==yi" or "xi!=yi".
Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.
Return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.

class Solution {
    int[] par;
    public boolean equationsPossible(String[] equations) {
        par = new int[26];
        for(int i = 0; i<26; i++){
            par[i] = i;
        }
        
        for(String equation : equations){
            int p1 = findPar(equation.charAt(0)-'a');
            int p2 = findPar(equation.charAt(3)-'a');
            if(equation.charAt(1)=='='){
                par[p1] = p2;
            }
        }
        
        for(String equation : equations){
            int p1 = findPar(equation.charAt(0)-'a');
            int p2 = findPar(equation.charAt(3)-'a');
            if(equation.charAt(1)=='!' && p1==p2){
                return false;
            }
        }
        
        return true;
    }
    
    public int findPar(int node){
        if(par[node]==node){
            return node;
        }else{
            return findPar(par[node]);
        }
    }
}

Result:
Runtime: 0 ms, faster than 100.00% of Java online submissions for Satisfiability of Equality Equations.
Memory Usage: 39 MB, less than 52.94% of Java online submissions for Satisfiability of Equality Equations.
