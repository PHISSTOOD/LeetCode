Given a m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:
1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])
Notice that there could be some invalid signs on the cells of the grid which points outside the grid.
You will initially start at the upper left cell (0,0). 
A valid path in the grid is a path which starts from the upper left cell (0,0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. 
The valid path doesn't have to be the shortest.
You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.
Return the minimum cost to make the grid have at least one valid path.

class Solution {
    public class node{
        int row;
        int column;
        int cost;
        public node(int row, int column, int cost){
            this.row = row;
            this.column = column;
            this.cost = cost;
        }
    } 
    public int minCost(int[][] grid) {
        int r = grid.length;
        int c = grid[0].length;
        if(r==1 & c==1){
            return 0;
        }
        boolean[][] seen = new boolean[r][c];
        PriorityQueue<node> queue = new PriorityQueue<>((a,b)->a.cost-b.cost);
        queue.offer(new node(0,0,0));
        while(!queue.isEmpty()){
            node cur = queue.poll();
            seen[cur.row][cur.column] = true;
            if(cur.row==r-1 && cur.column == c-1){
                return cur.cost;
            }
            if(cur.column+1!=c && seen[cur.row][cur.column+1]!=true){
                queue.offer(new node(cur.row, cur.column+1, cur.cost+(grid[cur.row][cur.column]==1?0:1)));
            }
            if(cur.column-1!=-1 && seen[cur.row][cur.column-1]!=true){
                queue.offer(new node(cur.row, cur.column-1, cur.cost+(grid[cur.row][cur.column]==2?0:1)));
            }
            if(cur.row+1!=r && seen[cur.row+1][cur.column]!=true){
                queue.offer(new node(cur.row+1, cur.column, cur.cost+(grid[cur.row][cur.column]==3?0:1)));
            }
            if(cur.row-1!=-1 && seen[cur.row-1][cur.column]!=true){
                queue.offer(new node(cur.row-1, cur.column, cur.cost+(grid[cur.row][cur.column]==4?0:1)));
            }
        }
        return 0;
    }
}

Result:
Runtime: 100 ms, faster than 18.99% of Java online submissions for Minimum Cost to Make at Least One Valid Path in a Grid.
Memory Usage: 51.9 MB, less than 22.64% of Java online submissions for Minimum Cost to Make at Least One Valid Path in a Grid.
