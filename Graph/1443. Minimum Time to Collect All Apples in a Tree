Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. 
Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.
The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. 
Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.

Solution Description:
This question is about graph, so first we need to create a map to record the graph, then we itereate the graph from the root. When we meet a node, if it has apple or it's 
children have apple we should add it.

Code:
class Solution {
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        Map<Integer,List<Integer>> graph = createGraph(edges);
        Map<Integer,Boolean> map = new HashMap();
        return dfs(graph, map, hasApple, 0, 0);
    }
    
    public Map<Integer,List<Integer>> createGraph(int[][] edges){
        Map<Integer,List<Integer>> map = new HashMap();
        for(int i = 0; i < edges.length; i++){
            List<Integer> list = map.getOrDefault(edges[i][0],new ArrayList());
            list.add(edges[i][1]);
            map.put(edges[i][0],list);
            list = map.getOrDefault(edges[i][1],new ArrayList());
            list.add(edges[i][0]);
            map.put(edges[i][1],list);
        }
        return map;
    }
    
    public int dfs(Map<Integer,List<Integer>> graph, Map<Integer, Boolean> map, List<Boolean> hasApple, int cur, int path){
        Boolean v = map.getOrDefault(cur, false);
        if(v){
            return 0;
        }
        map.put(cur,true);
        int childrenPath = 0;
        for(int i : graph.get(cur)){
            childrenPath += dfs(graph, map, hasApple, i, 2);
        }
        if(childrenPath == 0 && hasApple.get(cur)==false){
            return 0;
        }
        return path + childrenPath;
    }
}

Result:
Runtime: 88 ms, faster than 20.56% of Java online submissions for Minimum Time to Collect All Apples in a Tree.
Memory Usage: 80.3 MB, less than 92.71% of Java online submissions for Minimum Time to Collect All Apples in a Tree.
