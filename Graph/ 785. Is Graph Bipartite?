There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. 
You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u],
there is an undirected edge between node u and node v.
The graph has the following properties:
There are no self-edges (graph[u] does not contain u).
There are no parallel edges (graph[u] does not contain duplicate values).
If v is in graph[u], then u is in graph[v] (the graph is undirected).
The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.
Return true if and only if it is bipartite.

class Solution {
    public boolean isBipartite(int[][] graph) {
        int[] color = new int[graph.length];
        for(int i = 0; i<graph.length; i++){
            if(color[i]!=0){
                continue;
            }
            color[i] = 1;
            Queue<Integer> queue = new LinkedList();
            queue.offer(i);
            // Using BFS to detect is the graph is valid.
            while(!queue.isEmpty()){
                int cur = queue.poll();
                for(int nbr : graph[cur]){
                    if(color[nbr]!=0){
                        if(color[nbr]==color[cur]){
                            return false;
                        }
                    }else{
                        color[nbr] = 0-color[cur];
                        queue.offer(nbr);
                    }
                }
            }
        }
        return true;
    }
}


Result:
Runtime: 2 ms, faster than 37.02% of Java online submissions for Is Graph Bipartite?.
Memory Usage: 51.4 MB, less than 15.31% of Java online submissions for Is Graph Bipartite?.
