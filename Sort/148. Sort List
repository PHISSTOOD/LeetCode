Sort a linked list in O(n log n) time using constant space complexity.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null)
        {
            return head;
        }
        ListNode l1 = head;
        ListNode mid = findmiddle(head);
        ListNode l2 = mid.next;
        mid.next = null;
        l1 = sortList(l1);
        l2 = sortList(l2);
        return merge(l1, l2);
        
    }
    
    private ListNode merge(ListNode l1,ListNode l2)
    {
        ListNode pre = new ListNode(0);
        ListNode cur;
        cur = pre;
        while(l1!=null && l2!=null)
        {
            if(l1.val<l2.val)
            {
                cur.next = l1;
                l1 = l1.next;
            }else
            {
                cur.next = l2;
                l2 = l2.next;
            }
            cur = cur.next;
        }
        if(l1==null)
        {
            cur.next = l2;
        }
        if(l2==null)
        {
            cur.next = l1;
        }
        return pre.next;
    }
    private ListNode findmiddle(ListNode head) {
        if (head == null)
            return head;
        ListNode slow = head, fast = head;
        
        while (fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return slow;
    }
}
