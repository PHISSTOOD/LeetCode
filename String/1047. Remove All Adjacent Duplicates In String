You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.
We repeatedly make duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.

Solution Description:
Using stack to store non-duplicate letters so far, iterating the character in string, if the peek of stack is equal to character then pop else push.
Some tricky solutions are using array or StringBuilder instead of using stack, which can have a better result.

Code:
class Solution {
    public String removeDuplicates(String s) {
        Stack<Character> stack = new Stack();
        for(int i = 0; i<s.length(); i++){
            if(!stack.isEmpty() && stack.peek()==s.charAt(i)){
                stack.pop();
            }else{
                stack.push(s.charAt(i));
            }
        }
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()){
            sb.append(stack.pop());
        }
        return sb.reverse().toString();
    }
}

Result:
Runtime: 23 ms, faster than 47.35% of Java online submissions for Remove All Adjacent Duplicates In String.
Memory Usage: 39.5 MB, less than 59.40% of Java online submissions for Remove All Adjacent Duplicates In String.
