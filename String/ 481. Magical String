A magical string s consists of only '1' and '2' and obeys the following rules:
The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.
The first few elements of s is s = "1221121221221121122……". If we group the consecutive 1's and 2's in s, it will be "1 22 11 2 1 22 1 22 11 2 11 22 ......"
and the occurrences of 1's or 2's in each group are "1 2 2 1 1 2 1 2 2 1 2 2 ......". You can see that the occurrence sequence is s itself.
Given an integer n, return the number of 1's in the first n number in the magical string s.

Solution Description:
Add the first 3 numbers in the array, and set the index, tail, result, cur. In the loop, if the num at array[head] is 1 add 1 cur in the array, else add 2 cur intp the array.
Then change the cur num which represent the next number. And the the code written by using array is much faster than using stringbuilder.

Code:
class Solution {
    public int magicalString(int n) {
        if (n == 0){
            return n;
        }else if(n<=3){
            return 1;
        }
        int result = 1;
        int index = 2;
        int last = 2;
        int tail = 3;
        int[] array = new int[n+1];
        array[0] = 1;
        array[1] = 2;
        array[2] = 2;
        while(tail < n){
            int curNum = array[index];
            last = 3 - last;
            int curCount = 0;
            while(curCount<curNum){
                array[tail++] = last;
                curCount++;
            }
            if(last==1){
                result += curNum;
            }
            index++;
        }
        if(tail>n && array[n] == 1){
            result--;
        }
        return result;
    }

}

Result:
Runtime: 2 ms, faster than 100.00% of Java online submissions for Magical String.
Memory Usage: 37.9 MB, less than 79.82% of Java online submissions for Magical String.
