Sometimes people repeat letters to represent extra feeling. For example:
"hello" -> "heeellooo"
"hi" -> "hiiii"
In these strings like "heeellooo", we have groups of adjacent letters that are all the same: "h", "eee", "ll", "ooo".
You are given a string s and an array of query strings words. 
A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, 
and add some number of characters c to the group so that the size of the group is three or more.
For example, starting with "hello", we could do an extension on the group "o" to get "hellooo", but we cannot get "helloo" since the group "oo" has a size less than three.
Also, we could do another extension like "ll" -> "lllll" to get "helllllooo". If s = "helllllooo", 
then the query word "hello" would be stretchy because of these two extension operations: query = "hello" -> "hellooo" -> "helllllooo" = s.
Return the number of query strings that are stretchy.

Code:
class Solution {
    public int expressiveWords(String s, String[] words) {
        int count = 0;
        for(String word : words) {
            if(isMatch(s, word)) {
                count ++;
            }
        }
        return count;
    }
    
    private boolean isMatch(String s, String w) {
        if(s.equals(w)) {
            return true;
        }
        if( s.length() == 0 || w.length() == 0 || w.length() > s.length() ) {
            return false;
        }
        int sIndex = 0, wIndex = 0;
        while(sIndex < s.length() && wIndex < w.length()) {
            char sChar = s.charAt(sIndex);
            char wChar = w.charAt(wIndex);
            if(sChar != wChar) {
                return false;
            }
            int sCount  = 0;
            while(sIndex < s.length() && s.charAt(sIndex) == sChar) {
                sCount ++;
                sIndex ++;
            }
            int wCount = 0;
            while(wIndex < w.length() && w.charAt(wIndex) == wChar) {
                wCount ++;
                wIndex ++;
            }
            if(wCount > sCount || (sCount > wCount  && sCount < 3)) {
                return false;
            }
        }
        return sIndex == s.length() && wIndex == w.length();
    }
}

Result:
Runtime: 2 ms, faster than 71.87% of Java online submissions for Expressive Words.
Memory Usage: 39.2 MB, less than 36.31% of Java online submissions for Expressive Words.
