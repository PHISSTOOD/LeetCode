Given a string s of '(' , ')' and lowercase English characters.
Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.
Formally, a parentheses string is valid if and only if:
It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.


Code:
class Solution {
    public String minRemoveToMakeValid(String s) {
        Stack<Integer> stack = new Stack();
        char[] c = s.toCharArray();
        for(int i = 0; i<s.length(); i++){
            if(c[i]=='('){
                stack.push(i);
            }else if(c[i]==')'){
                if(stack.empty()){
                    c[i] = ' ';
                }else{
                    stack.pop();
                }
            }
        }
        while(!stack.empty()){
            c[stack.pop()] = ' ';
        }
        return String.valueOf(c).replace(" ", "");
    }
}

Result:
Runtime: 13 ms, faster than 89.23% of Java online submissions for Minimum Remove to Make Valid Parentheses.
Memory Usage: 39.9 MB, less than 64.95% of Java online submissions for Minimum Remove to Make Valid Parentheses.
