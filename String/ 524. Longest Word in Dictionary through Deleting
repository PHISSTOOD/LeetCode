Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. 
If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.

Solution Description:
There are two implementaion difficulties in this problem, one is hwo to return the smallesr lexicographical order word, another is how to judge if the string contain a word fastly.
1. In java, we can't compare two string directly, so we use .compareTo() to compare two String.
2. There are two ways to judge if the initial String contains a word: one is iterate the Source word, another is iterate the target word. 
The performance of second way is muchb better.

Code:
class Solution {
    public String findLongestWord(String s, List<String> dictionary) {
        String result = "";
        for(String cur : dictionary){
            if(cur.length()<result.length() || (cur.length() == result.length() && cur.compareTo(result) > 0)){
                continue;
            }
            int pos = -1;
            for(int i = 0;i<cur.length();i++){
                pos = s.indexOf(cur.charAt(i),pos+1);
                if(pos==-1){
                    break;
                }
            }
            if(pos!=-1){
                result = cur;
            }
        }
        return result;
    }
}

Result:
Runtime: 6 ms, faster than 99.40% of Java online submissions for Longest Word in Dictionary through Deleting.
Memory Usage: 40 MB, less than 40.01% of Java online submissions for Longest Word in Dictionary through Deleting.
