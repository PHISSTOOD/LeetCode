Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.
A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


class Solution {
    Map<String,String> phone = new HashMap<String,String>()
    {{
        put("2", "abc");
        put("3", "def");
        put("4", "ghi");
        put("5", "jkl");
        put("6", "mno");
        put("7", "pqrs");
        put("8", "tuv");
        put("9", "wxyz");
    }};
    
    List<String> result = new ArrayList<String>();
    
    
    public List<String> letterCombinations(String digits) {
        
        int n;
        n = digits.length();
        if(n == 0)
        {

            return result;
        }
        Trackback("",digits);
        return result;
        
    }
    
    private void Trackback(String combination,String digit)
    {
        if(digit.length()==0)
        {
            result.add(combination);
        }
        else
        {
            String next_digit = digit.substring(0,1);
            String letters = phone.get(next_digit);
            for(int i = 0; i< letters.length();i++)
            {
                String letter = phone.get(next_digit).substring(i,i+1);
                Trackback(combination+letter,digit.substring(1));
            }
         }
    }
}
