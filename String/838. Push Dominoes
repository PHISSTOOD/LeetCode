There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.
After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly,
the dominoes falling to the right push their adjacent dominoes standing on the right.
When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.
For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.
You are given a string dominoes representing the initial state where:
dominoes[i] = 'L', if the ith domino has been pushed to the left,
dominoes[i] = 'R', if the ith domino has been pushed to the right, and
dominoes[i] = '.', if the ith domino has not been pushed.
Return a string representing the final state.

Solution 1:
The first solution is easy to understand, I focus on the status of each second, using 0~3 to represent some status that may occur in the real dominoes, and as time goes by, to 
get the final status of dominoes.

Code:
class Solution {
    public String pushDominoes(String dominoes) {
        if(dominoes.length()<2){
            return dominoes;
        }
        int[] domino = new int[dominoes.length()];
        char[] s = dominoes.toCharArray();
        for(int i = 0; i<s.length; i++){
            if(s[i]=='L'){
                domino[i] = 1;
            }else if(s[i]=='R'){
                domino[i] = 2;
            }else{
                domino[i] = 0;
            }
        }
        boolean flag = true;
        while(flag){
            flag = false;
            for(int i = 0; i<domino.length; i++){
                if(domino[i]==2){
                    domino[i] = 3;
                }
                if(i==0){
                    if(domino[1]==1 && domino[i]==0){
                        domino[i] = 1;
                    }
                }else if(i == (domino.length-1)){
                    if(domino[domino.length-2]==3 && domino[i]==0){
                        domino[i] = 2;
                    }
                }else{
                    if(domino[i-1]==3 && domino[i+1]==1 && domino[i] == 0){
                        domino[i] = 0;
                    }else if(domino[i-1]==3 && domino[i]==0){
                        domino[i] = 2;
                        flag = true;
                    }else if(domino[i+1]==1 && domino[i]==0){
                        domino[i] = 1;
                        flag = true;
                    }
                }
            }
        }
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i<domino.length; i++){
            if(domino[i]==0){
                sb.append('.');
            }else if(domino[i]==1){
                sb.append('L');
            }else{
                sb.append('R');
            }
        }
        return sb.toString();
    }
}

Solution 2: 
Solution 2 is much faster than the first, I focus on the two adjacent position which are not '.', 
R...L - push everything except last in between
..L - push all to the left
R.. - push all to the right
. R - change pointers
L .. R - change pointers

Code:
class Solution {
    public String pushDominoes(String dominoes) {
        char[] s = dominoes.toCharArray();
        int start = -1;
        int end = 0;
        StringBuilder sb = new StringBuilder();
        for(;end<s.length;end++){
            if(s[end]=='.'){
                continue;
            }else if(s[end]=='L'){
                if(start == -1 || s[start]=='L'){
                    write(sb, 'L', start, end, s);
                    start = end;
                }else if(s[start]=='R'){
                    write(sb, 'M', start, end, s);
                    start = end;
                }
            }else{
                if(start == -1 || s[start]=='L'){
                    write(sb, '.', start, end, s);
                    start = end;
                }else if(s[start]=='R'){
                    write(sb, 'R', start, end, s);
                    start = end;
                }
            }
        }
        if(start!=-1 && start!=s.length-1){
            if(s[start]=='R'){
                write(sb, 'R', start, end, s);
            }else{
                write(sb, '.', start, end, s);
            }
        }
        if(start==-1){
            return dominoes;
        }
        return sb.toString();
    }
    
    public void write(StringBuilder sb, char c, int start, int end, char[] s){
        int count = 0;
        if(c=='M'){
            while(count<((end-start-1)/2)){
                sb.append('R');
                count++;
            }
            count = 0;
            if((end-start-1)%2==1){
                sb.append('.');
            }
            while(count<((end-start-1)/2)){
                sb.append('L');
                count++;
            }
            count = 0;
        }else{
            while(count<(end-start-1)){
                sb.append(c);
                count++;
            }
            count = 0;
        }
        if(end!=s.length){
            sb.append(s[end]);
        }
    }
}

Result:
Runtime: 15 ms, faster than 66.71% of Java online submissions for Push Dominoes.
Memory Usage: 40.4 MB, less than 56.79% of Java online submissions for Push Dominoes.
