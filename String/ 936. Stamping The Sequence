You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.
In one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.
For example, if stamp = "abc" and target = "abcba", then s is "?????" initially. In one turn you can:
place stamp at index 0 of s to obtain "abc??",
place stamp at index 1 of s to obtain "?abc?", or
place stamp at index 2 of s to obtain "??abc".
Note that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).
We want to convert s to target using at most 10 * target.length turns.
Return an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.

Solution Description:
Think the target as multiple layers, we can find the complete stamp first and then replace the letters to *, like we peel the layers and reverse the process.

Code:
class Solution {
    public int[] movesToStamp(String stamp, String target) {
        if(stamp.equals(target)){
            return new int[]{0};
        }
        char[] s = stamp.toCharArray();
        char[] t = target.toCharArray();
        List<Integer> list = new ArrayList();
        Boolean dif = true, sdif;
        int i = 0;
        while(dif){
            for(i = 0, dif = false; i<t.length-s.length+1; i++){
                int j = 0;
                for(sdif = false; j<s.length; j++){
                    if(t[i+j]=='*'){
                        continue;
                    }else if(s[j]!=t[i+j]){
                        break;
                    }else{
                        sdif = true;
                    }
                }
                if(j==s.length && sdif){
                    list.add(0,i);
                    for(j = i, dif = true; j<i+s.length; j++){
                        t[j] = '*';
                    }
                }
            }
        }
        for (i = 0; i < t.length; i++){
            if (t[i] != '*') {
                return new int[]{};
            }
        }
        int[] result = new int[list.size()];
        for(i = 0; i<list.size(); i++){
            result[i] = list.get(i);
        }
        return result;
    }
}

Result:
Runtime: 9 ms, faster than 50.98% of Java online submissions for Stamping The Sequence.
Memory Usage: 41.2 MB, less than 25.49% of Java online submissions for Stamping The Sequence.
