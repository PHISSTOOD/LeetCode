Given two stings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.
Each letter in magazine can only be used once in ransomNote.

Solution Description:
The main idea of two solutions is get the statistic of the letters of two strings, if magazine contains plus 1, else minus 1. Then iterate the statistic, if it contains 
negative number return false. And the difference between two solution is one using map to count the letters anther using array. 

Code 1:
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        Map<Character, Integer> map = new HashMap();
        for(int i = 0; i<magazine.length(); i++){
            map.put(magazine.charAt(i), map.getOrDefault(magazine.charAt(i),0)+1);
        }
        for(int i = 0; i<ransomNote.length(); i++){
            if(!map.containsKey(ransomNote.charAt(i))){
                return false;
            }
            map.put(ransomNote.charAt(i),map.get(ransomNote.charAt(i))-1);
            if(map.get(ransomNote.charAt(i))<0){
                return false;
            }
        }
        return true;
    }
}

Result:
Runtime: 9 ms, faster than 43.65% of Java online submissions for Ransom Note.
Memory Usage: 39.2 MB, less than 67.46% of Java online submissions for Ransom Note.

Code 2:
class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] letters = new int[26];
        for(int i = 0; i<magazine.length(); i++){
            letters[magazine.charAt(i)-'a']++;
        }
        for(int i = 0; i<ransomNote.length(); i++){
            letters[ransomNote.charAt(i)-'a']--;
            if(letters[ransomNote.charAt(i)-'a']<0){
                return false;
            }
        }
        return true;
    }
}

Result:
Runtime: 3 ms, faster than 80.28% of Java online submissions for Ransom Note.
Memory Usage: 39.5 MB, less than 41.78% of Java online submissions for Ransom Note.
