Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. 
If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.

Solution Description:


Code:
class Solution {
    public String findLongestWord(String s, List<String> dictionary) {
        String result = "";
        for(String cur : dictionary){
            if(cur.length()<result.length() || (cur.length() == result.length() && cur.compareTo(result) > 0)){
                continue;
            }
            int pos = -1;
            for(int i = 0;i<cur.length();i++){
                pos = s.indexOf(cur.charAt(i),pos+1);
                if(pos==-1){
                    break;
                }
            }
            if(pos!=-1){
                result = cur;
            }
        }
        return result;
    }
}

Result:
Runtime: 6 ms, faster than 99.40% of Java online submissions for Longest Word in Dictionary through Deleting.
Memory Usage: 40 MB, less than 40.01% of Java online submissions for Longest Word in Dictionary through Deleting.
