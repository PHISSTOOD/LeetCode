You are given a string s consisting only of characters 'a' and 'b'
You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.
Return the minimum number of deletions needed to make s balanced.

class Solution {
    public int minimumDeletions(String s) {
        int[] count1 = new int[s.length()];
        int[] count2 = new int[s.length()];
        char[] str = s.toCharArray();
        int count = 0;
        for(int i = 0; i<s.length(); i++){
            if(str[i]=='b'){
                count++;
            }
            count1[i] = count;
        }
        count = 0;
        for(int i = s.length()-1; i>=0 ; i--){
            if(str[i]=='a'){
                count++;
            }
            count2[i] = count;
        }
        int result = s.length();
        for(int i = 0; i<s.length(); i++){
            result = Math.min(result, count1[i]+count2[i]-1);
        }
        return result;
    }
}

Result:
Runtime: 35 ms, faster than 65.99% of Java online submissions for Minimum Deletions to Make String Balanced.
Memory Usage: 41.3 MB, less than 44.44% of Java online submissions for Minimum Deletions to Make String Balanced.
