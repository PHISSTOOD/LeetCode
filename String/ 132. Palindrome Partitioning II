Given a string s, partition s such that every substring of the partition is a palindrome.
Return the minimum cuts needed for a palindrome partitioning of s.

class Solution {
    public int minCut(String s) {
        int length = s.length();
        if(length<=1)
        {
            return 0;
        }
        int[] dp = new int[length];
        dp[0] = 0;
        for(int i = 1;i<length;i++)
        {
            dp[i] = dp[i-1]+1;
            for(int j = i-1;j>=0;j--)
            {
                if(isvalid(s.substring(j,i+1)))
                {
                    if(j==0)
                    {
                        dp[i] = 0;
                    }
                    else
                    {
                        dp[i] = Math.min(dp[i],dp[j-1]+1);
                    }
                }
            }
        }
        return dp[length-1];
    }
    private boolean isvalid(String s)
    {
        int start = 0;
        int end = s.length()-1;
        while(start<=end)
        {
            if(s.charAt(start)!=s.charAt(end))
            {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
}
