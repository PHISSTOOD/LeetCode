You are given an array of words where each word consists of lowercase English letters.
wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.
For example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad".
A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. 
A single word is trivially a word chain with k == 1.
Return the length of the longest possible word chain with words chosen from the given list of words.


Code:
class Solution {
    public int longestStrChain(String[] words) {
        HashMap<Integer,List<String>> map = new HashMap();
        for(String s:words){
            int cur = s.length();
            if(!map.containsKey(cur)){
                List<String> list = new ArrayList();
                map.put(cur,list);
            }
            map.get(cur).add(s);
        }
        HashMap<String, Integer> cache = new HashMap();
        int result = 0;
        for(String s : words){
            result = Math.max(result,find(map,cache,s)+1);
        }
        return result;
    }
    
    public int find(HashMap<Integer,List<String>> map, HashMap<String,Integer> cache, String s){
        if(cache.containsKey(s)){
            return cache.get(s);
        }
        int result = 0;
        int targetLen = s.length() + 1;
        if(!map.containsKey(targetLen)){
            return result;
        }else{
            for(int i = 0; i<map.get(targetLen).size();i++){
                String cur = map.get(targetLen).get(i);
                if(isPredecessor(s,cur)){
                    result = Math.max(result,find(map,cache,cur)+1);
                }
            }
        }
        cache.put(s,result);
        return result;
    }
    
    public boolean isPredecessor(String src, String target){
        int index1 = 0;
        int index2 = 0;
        boolean flag = true;
        while(index1 < src.length()){
            if(src.charAt(index1)==target.charAt(index2)){
                index1++;
                index2++;
            }else if(flag==true){
                index2++;
                flag = false;
            }else{
                return false;
            }
        }
        return true;
    }
}

Result:
Runtime: 25 ms, faster than 93.16% of Java online submissions for Longest String Chain.
Memory Usage: 43 MB, less than 29.23% of Java online submissions for Longest String Chain.
