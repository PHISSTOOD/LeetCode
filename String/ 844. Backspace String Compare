Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.


Code:
class Solution {
    public boolean backspaceCompare(String s, String t) {
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i<s.length(); i++){
            if(sb.length()==0 && s.charAt(i)=='#'){
                continue;
            }else{
                if(s.charAt(i)=='#'){
                    sb.setLength(sb.length()-1);
                }else{
                    sb.append(s.charAt(i));
                }
            }
        }
        String newS = sb.toString();
        sb = new StringBuilder();
        for(int i = 0; i<t.length(); i++){
            if(sb.length()==0 && t.charAt(i)=='#'){
                continue;
            }else{
                if(t.charAt(i)=='#'){
                    sb.setLength(sb.length()-1);
                }else{
                    sb.append(t.charAt(i));
                }
            }
        }
        String newT = sb.toString();
        return newS.equals(newT);
    }
}

result:
Runtime: 1 ms, faster than 73.17% of Java online submissions for Backspace String Compare.
Memory Usage: 36.9 MB, less than 92.92% of Java online submissions for Backspace String Compare.
