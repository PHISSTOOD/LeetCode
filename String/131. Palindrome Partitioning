class Solution {
    List<List<String>> result;
    public List<List<String>> partition(String s) {
        result = new ArrayList<>();
        dfs(0, s, new ArrayList<String>());
        return result;
    }
    
    // dfs fuction to get all possible List
    public void dfs(int index, String s, List<String> cur){
        // judge if we reach the last index
        if(index>=s.length()){
            result.add(new ArrayList(cur));
            return;
        }
        // traverse all possible palindrome
        for(int i = index+1; i<=s.length(); i++){
            if(isPalindrome(s.substring(index, i))){
                cur.add(s.substring(index,i));
                dfs(i,s,cur);
                cur.remove(cur.size()-1);
            }
        }
    }
    
    // judge weather a string is a palindrome
    public boolean isPalindrome(String s){
        int start = 0;
        int end = s.length()-1;
        while(start<end){
            if(s.charAt(start)!=s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}

Result:
Runtime: 10 ms, faster than 61.55% of Java online submissions for Palindrome Partitioning.
Memory Usage: 53.5 MB, less than 59.34% of Java online submissions for Palindrome Partitioning.
