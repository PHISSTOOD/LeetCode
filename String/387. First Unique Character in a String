Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character,Integer> map = new HashMap();
        for(int i = 0;i<s.length();i++)
        {
            map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0)+1);
        }
        int result  = -1;
        if(!map.containsValue(1))
        {
            return result;
        }
        for(int i = 0;i<s.length();i++)
        {
            if(map.get(s.charAt(i))==1)
            {
                result = i;
                return result;
            }
        }
        return result;
    }
}

class Solution {
    public int firstUniqChar(String s) {
        int res = s.length();
        for (char c = 'a'; c <= 'z'; c++) {
	        int index = s.indexOf(c);
	        if (index != -1 && index == s.lastIndexOf(c)) res = Math.min(res, index);
        }
        return res == s.length() ? -1 : res;
    }
}

faster than 100.00% of Java online submissions for First Unique Character in a String.
Memory Usage: 38.1 MB, less than 98.57% of Java online submissions for First Unique Character in a String.
