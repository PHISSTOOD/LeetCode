Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, 
add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.
Note:
The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.

class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        int maxlength = 0;
        Set<String> set = new HashSet(wordDict);
        HashMap<Integer,List<String>> map = new HashMap();
        for(int i = 0;i<wordDict.size();i++)
        {
            maxlength = Math.max(maxlength,wordDict.get(i).length());
        }
        return dfs(s,0,set,maxlength,map);
    }
    private List<String> dfs(String s,int cur,Set<String> set,int maxlength,HashMap <Integer,List<String>> memo)
    {
        if (memo.containsKey(cur)) 
        {
            return memo.get(cur);
        }
        List<String> result = new ArrayList<String>();
        for(int j = 1;j<=maxlength && cur+j<=s.length();j++)
        {
            if(set.contains(s.substring(cur,cur+j)))
            {
                if (cur+j == s.length()) 
                {
                    result.add(s.substring(cur,cur+j));
                    break;
                }
                List<String> sublist = dfs(s, cur+j,set,maxlength,memo);
                for (String sub : sublist) 
                {
                    result.add(s.substring(cur,cur+j) + " " + sub);    
                }
            }
        }
        memo.put(cur, result);
        return result;
    }
}


