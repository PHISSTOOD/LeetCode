A valid parentheses string is either empty "", "(" + A + ")", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.
For example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.
Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.
Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

Solution Description:
In this question, we just need to condider the most out parentheses, so we set a value to record if we are the in parentheses, if we are in, we just need to copy the string. Else
we should to ignore the parentheses.

class Solution {
    public String removeOuterParentheses(String s) {
        boolean first = false;
        int count = 0;
        StringBuilder sb = new StringBuilder();
        char[] c = s.toCharArray();
        for(int i = 0; i < s.length(); i++){
            if(first == false){
                if(c[i]=='('){
                    first = true;
                }
            }else{
                if(c[i]=='('){
                    count++;
                    sb.append(c[i]);
                }else{
                    if(count>0){
                        count--;
                        sb.append(c[i]);
                    }else{
                        first = false;
                    }
                }
            }
        }
        return sb.toString();
    }
}

Result:
Runtime: 2 ms, faster than 98.07% of Java online submissions for Remove Outermost Parentheses.
Memory Usage: 39.2 MB, less than 53.63% of Java online submissions for Remove Outermost Parentheses.
