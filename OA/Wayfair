class Solution {
    public int numMagicSquaresInside(int[][] A) {
        int K = A.length, L = A[0].length;
        int ans = Math.min(L,K);
        for(;ans>1;ans--)
        {
            for(int c = (L-ans);c>=0;c--)
            {
                for(int r = (K-ans);r>=0;r--)
                {
                    if(magic(r,c,A,ans))
                    {
                        return ans;
                    }
                }
            }
        }
        return 1;
    }
    private boolean magic(int r,int c,int[][] A,int size)
    {
        int sum = 0;
        for(int i = 0;i<size;i++)
        {
            sum = sum + A[r][c+i];
        }
        for(int i = 0;i<size;i++)
        {
            int count = 0;
            for(int j = 0;j<size;j++)
            {
                count = count + A[r][c+j];
            }
            if(count != sum)
            {
                return false;
            }
        }
        for(int i = 0;i<size;i++)
        {
            int count = 0;
            for(int j = 0;j<size;j++)
            {
                count = count + A[r+j][c];
            }
            if(count != sum)
            {
                return false;
            }
        }
        int countdia1 = 0;
        for(int i = 0;i<size;i++)
        {
            countdia1 = countdia1 + A[r+i][c+i];
        }
        if(countdia1!=sum)
        {
            return false;
        }
        int countdia2 = 0;
        for(int i = 0;i<size;i++)
        {
            countdia2 = countdia2 + A[r+i][c+size-1-i];
        }
        if(countdia2!=sum)
        {
            return false;
        }
        return true;
    }
}
