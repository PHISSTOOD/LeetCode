Design and implement a data structure for Least Recently Used (LRU) cache. 
It should support the following operations: get and put.
get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, 
it should invalidate the least recently used item before inserting a new item.
The cache is initialized with a positive capacity.



class LRUCache {

	private class DLinkedNode {
        private int key;
		private int value;
		private DLinkedNode prev;
		private DLinkedNode next;

		public DLinkedNode(int key, int value) {
            this.key = key;
			this.value = value;
		}
	}

	private DLinkedNode head;
	private DLinkedNode tail;
	private int capacity;
	Map<Integer, DLinkedNode> keyToNode;

	public LRUCache(int capacity) {
        head = null;
        tail = null;
		this.capacity = capacity;
		keyToNode = new HashMap<>();
	}

	public int get(int key) {
		DLinkedNode node = keyToNode.getOrDefault(key, null);
		if(node == null) {
			return -1;
		}
		moveNodeToHead(node);
		return node.value;
	}

	public void put(int key, int value) {
		// if key is already there, we update
		if(keyToNode.containsKey(key)) {
			DLinkedNode node = keyToNode.get(key);
			node.value = value;
			moveNodeToHead(node);
		} else {
            DLinkedNode node = new DLinkedNode(key, value);
			if(keyToNode.size() == capacity) {
                keyToNode.remove(tail.key);
				removeLastNode();
			}
			addNodeAhead(node);
			keyToNode.put(key, node);
		}
	}

	private void moveNodeToHead(DLinkedNode node) {
		if(node != head) { // move node in front of head node
			if(node == tail) {
				tail = tail.prev;
			} else {
                node.next.prev = node.prev;
            }
			node.prev.next = node.next;
			node.next = head;
            head.prev = node;
			node.prev = null;
			head = node;
		}
	}

	private void removeLastNode() {
		if(head == tail) {
			head = null;
			tail = null;
		} else {
			tail = tail.prev;
			tail.next = null;
		}
	}

	private void addNodeAhead(DLinkedNode node) {
		if(head == null) {
			head = node;
			tail = node;
		} else {
			node.next = head;
            node.prev = null;
			head.prev = node;
			head = node;
		}
	}
}



