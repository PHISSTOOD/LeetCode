Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.

class MinStack {

    int min = Integer.MAX_VALUE;
    Stack<Integer> st;
    public MinStack() {
        st = new Stack<Integer>();
    }
    
    public void push(int x) {
        if(x<=min)
        {
            st.push(min);
            min = x;
        }
        st.push(x);
        
    }
    
    public void pop() {
        if(st.pop()==min)
        {
            min = st.pop();
        }
        
    }
    
    public int top() {
        return st.peek();
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
