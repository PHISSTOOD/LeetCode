We have a sorted set of digits D, a non-empty subset of {'1','2','3','4','5','6','7','8','9'}.  (Note that '0' is not included.)
Now, we write numbers using these digits, using each digit as many times as we want.  For example, if D = {'1','3','5'}, 
we may write numbers such as '13', '551', '1351315'.
Return the number of positive integers that can be written (using the digits of D) that are less than or equal to N.

class Solution {
    public int atMostNGivenDigitSet(String[] D, int N) {
        String target = Integer.toString(N);
        int result = 0;
        for(int i = 1;i<target.length();i++)
        {
            result += Math.pow(D.length,i);
        }
        return result += countSameLength(D,target);
    }
    private int countSameLength(String[] D,String target)
    {
        if(target.length()==0 || D[0].charAt(0)>target.charAt(0))
        {
            return 0;
        }
        int N = Integer.parseInt(target);
        int result = 0;
        int cur = 0;
        int flag = 0;
        for(int i = 0;i<D.length;i++)
        {
            if(D[i].charAt(0)<target.charAt(0))
            {
                cur++;
            }
            if(D[i].charAt(0)==target.charAt(0))
            {
                cur++;
                flag = 1;
                break;
            }
        }
        if(N>10&&flag==1)
        {
            cur--;
        }
        result += cur*Math.pow(D.length,target.length()-1);
        if(flag==1&&N>10)
        {
            result+=countSameLength(D,target.substring(1));
        }
        return result;
    }
    
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Numbers At Most N Given Digit Set.
Memory Usage: 34.2 MB, less than 100.00% of Java online submissions for Numbers At Most N Given Digit Set.
