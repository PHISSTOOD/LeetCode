We have some permutation A of [0, 1, ..., N - 1], where N is the length of A.
The number of (global) inversions is the number of i < j with 0 <= i < j < N and A[i] > A[j].
The number of local inversions is the number of i with 0 <= i < N and A[i] > A[i+1].
Return true if and only if the number of global inversions is equal to the number of local inversions.

class Solution {
    public boolean isIdealPermutation(int[] A) {
        int max = Integer.MIN_VALUE;
        for(int i = 0;i<A.length-2;i++){
            max = Math.max(max,A[i]);
            if(max>A[i+2]){
                return false;
            }
        }
        return true;
    }
}

Runtime: 3 ms, faster than 45.62% of Java online submissions for Global and Local Inversions.
Memory Usage: 50.8 MB, less than 66.67% of Java online submissions for Global and Local Inversions.
