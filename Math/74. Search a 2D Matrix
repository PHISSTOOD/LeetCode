Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int width = matrix.length;
        if(width == 0)
        {
            return false;
        }
        int length = matrix[0].length;
        if(length == 0)
        {
            return false;
        }
        int i =1;
        for(;i<width;i++)
        {
            if(matrix[i][0]>target)
            {
                break;
            }
        }
        if(matrix[i-1][0]<=target)
        {
            return find(matrix,target,i-1);
        }else 
        {
            return false;
        }
    }
    private boolean find(int[][] matrix, int target,int num)
    {
        for(int i = 0;i<matrix[0].length;i++)
        {
            if(matrix[num][i]==target)
            {
                return true;
            }
        }
        return false;
    }
}
