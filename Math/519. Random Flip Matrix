You are given the number of rows n_rows and number of columns n_cols of a 2D binary matrix where all values are initially 0.
Write a function flip which chooses a 0 value uniformly at random, changes it to 1, and then returns the position [row.id, col.id] of that value. 
Also, write a function reset which sets all values back to 0.
Try to minimize the number of calls to system's Math.random() and optimize the time and space complexity.

Solution Description:
This problem's restiction is runing time and memory limitation. So, we can't initialize a real 2 dimensional array to store the numbers, we use hashset instead of it.
In the hashSet we store the random number which can represent the position of a number.

class Solution {
    public Set<Integer> set;
    public int sum;
    public int count;
    public int rows, cols;
    public Solution(int n_rows, int n_cols) {
        set = new HashSet();
        sum = n_rows * n_cols;
        rows = n_rows;
        cols = n_cols;
        count = 0;
    }
    
    public int[] flip() {
        if(count==sum){
            return null;
        }
        Random r = new Random();
        int ran = r.nextInt(sum);
        if(!set.contains(ran)){
            set.add(ran);
            count++;
            return new int[]{ran/cols,ran%cols};
        }else{
            return flip();
        }
    }
    
    public void reset() {
        set = new HashSet();
        count = 0;
    }
}


Result:
Runtime: 27 ms, faster than 97.54% of Java online submissions for Random Flip Matrix.
Memory Usage: 39.5 MB, less than 95.08% of Java online submissions for Random Flip Matrix.
