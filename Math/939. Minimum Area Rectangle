You are given an array of points in the X-Y plane points where points[i] = [xi, yi].
Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.


Code:
class Solution {
    public int minAreaRect(int[][] points) {
        HashMap<Integer,HashSet<Integer>> map = new HashMap();
        for(int[] i : points){
            if(!map.containsKey(i[0])){
                HashSet<Integer> set = new HashSet();
                map.put(i[0],set);
            }
            map.get(i[0]).add(i[1]);
        }
        int result = Integer.MAX_VALUE;
        for(int i = 0; i<points.length; i++){
            for(int j = i+1; j<points.length; j++){
                if(points[i][0]!=points[j][0] && points[i][1]!=points[j][1]){
                    if(map.get(points[i][0]).contains(points[j][1]) && map.get(points[j][0]).contains(points[i][1])){
                        result = Math.min(result,Math.abs(points[i][0]-points[j][0])*Math.abs(points[i][1]-points[j][1]));
                    }
                }
            }
        }
        return result==Integer.MAX_VALUE ? 0 : result;
    }
}

Result:
Runtime: 184 ms, faster than 83.10% of Java online submissions for Minimum Area Rectangle.
Memory Usage: 39.1 MB, less than 87.03% of Java online submissions for Minimum Area Rectangle.
