Starting with a positive integer N, we reorder the digits in any order (including the original order)
such that the leading digit is not zero.
Return true if and only if we can do this in a way such that the resulting number is a power of 2.

class Solution {
    public boolean reorderedPowerOf2(int N) {
        int[] ans = count(N);
        for(int i = 0;i<32;i++){
            if(Arrays.equals(ans,count(1<<i))){
                return true;
            }
        }
        return false;
    }
    private int[] count(int num){
        int[] ans = new int[10];
        while(num>0){
            int cur = num%10;
            ans[cur]++;
            num /= 10;
        }
        return ans;
    }
}

Runtime: 1 ms, faster than 100.00% of Java online submissions for Reordered Power of 2.
Memory Usage: 33.5 MB, less than 25.00% of Java online submissions for Reordered Power of 2.
