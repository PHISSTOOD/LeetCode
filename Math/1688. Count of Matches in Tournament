You are given an integer n, the number of teams in a tournament that has strange rules:
If the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.
If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. 
A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.
Return the number of matches played in the tournament until a winner is decided.

Code:
class Solution {
    public int numberOfMatches(int n) {
        int result = 0;
        while(n>1){
            int cur = n/2;
            result += cur;
            n -= cur;
        }
        return result;
    }
}

Result:
Runtime: 0 ms, faster than 100.00% of Java online submissions for Count of Matches in Tournament.
Memory Usage: 37.9 MB, less than 5.96% of Java online submissions for Count of Matches in Tournament.
