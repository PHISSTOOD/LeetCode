You are given an even integer n. You initially have a permutation perm of size n where perm[i] == i (0-indexed).
In one operation, you will create a new array arr, and for each i:

If i % 2 == 0, then arr[i] = perm[i / 2].
If i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].
You will then assign arr to perm.

Return the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.

Solution:

class Solution {
    public int reinitializePermutation(int n) {
        if(n==2){
            return 1;
        }
        int num = 2;
        int result = 1;
        while(num!=1){
            if(num<n/2){
                num = num*2;
                result++;
            }else{
                num = 2*(num-(n/2))+1;
                result++;
            }
        }
        return result;
    }
}

Result:

Runtime: 0 ms, faster than 100.00% of Java online submissions for Minimum Number of Operations to Reinitialize a Permutation.
Memory Usage: 35.6 MB, less than 93.83% of Java online submissions for Minimum Number of Operations to Reinitialize a Permutation.
