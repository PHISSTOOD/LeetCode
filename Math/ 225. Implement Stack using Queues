Implement the following operations of a stack using queues.
push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.

class MyStack {
    Queue<Integer> myqueue;
    /** Initialize your data structure here. */
    public MyStack() {
        myqueue = new LinkedList<Integer>();
    }
    
    /** Push element x onto stack. */
    public void push(int x) {
        this.myqueue.offer(x);
    }
    
    /** Removes the element on top of the stack and returns that element. */
    public int pop() {
        int len = this.myqueue.size();
        Queue<Integer> queue = new LinkedList<Integer>();
        for(int i = 0;i<len-1;i++)
        {
            queue.offer(this.myqueue.poll());
        }
        int num = myqueue.poll();
        for(int i = 0;i<len-1;i++)
        {
            this.myqueue.offer(queue.poll());
        }
        return num;
    }
    
    /** Get the top element. */
    public int top() {
        int len = this.myqueue.size();
        Queue<Integer> queue = new LinkedList<Integer>();
        int num = 0;
        for(int i = 0;i<len;i++)
        {
            num = this.myqueue.peek();
            queue.offer(this.myqueue.poll());
        }
        for(int i = 0;i<len;i++)
        {
            this.myqueue.offer(queue.poll());
        }
        return num;
    }
    
    /** Returns whether the stack is empty. */
    public boolean empty() {
        if(this.myqueue.size()==0)
        {
            return true;
        }
        return false;
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */
