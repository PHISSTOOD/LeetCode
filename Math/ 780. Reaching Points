A move consists of taking a point (x, y) and transforming it to either (x, x+y) or (x+y, y).
Given a starting point (sx, sy) and a target point (tx, ty), 
return True if and only if a sequence of moves exists to transform the point (sx, sy) to (tx, ty). Otherwise, return False.

class Solution {
    public boolean reachingPoints(int sx, int sy, int tx, int ty) {
        return help(sx,sy,tx,ty);
    }
    private boolean help(int sx,int sy,int tx,int ty)
    {
        if(sx==tx && sy==ty)
        {
            return true;
        }else if(sx>tx || sy>ty)
        {
            return false;
        }else
        {
            if(tx>ty){
                int n = (tx-sx)/ty;
                int nx = 0;
                if(n>0) nx = tx-n*ty;
                else nx = tx-ty;
                return help(sx, sy, nx, ty);
            }
            else{
                int n = (ty-sy)/tx;
                int ny = 0;
                if(n>0) ny = ty-n*tx;
                else ny = ty-tx;
                return help(sx, sy, tx, ny);
            }
        }
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Reaching Points.
Memory Usage: 33 MB, less than 12.50% of Java online submissions for Reaching Points.
