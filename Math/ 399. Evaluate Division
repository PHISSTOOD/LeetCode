You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. 
Each Ai or Bi is a string that represents a single variable.
You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.
Return the answers to all queries. If a single answer cannot be determined, return -1.0.
Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.

Solution Description:
Create a class Edge and map<String,List<Edge>> to record each equation. And use dfs to search the answer, when we meet a new query, we search the list whose key is src in map,
if we can not find, then use each edge's div as src to search again.

Code:
class Solution {
    public class Edge{
        public String div;
        public double num;
        public Edge(String div, double num){
            this.div = div;
            this.num = num;
        }
    }
    
    public Map<String,List<Edge>> map;
    
    public void addEdge(String src, String div, double num){
        if(map.containsKey(src)){
            map.get(src).add(new Edge(div,num));
        }else{
            map.put(src,new ArrayList());
            map.get(src).add(new Edge(div,num));
        }
        if(map.containsKey(div)){
            map.get(div).add(new Edge(src,1/num));
        }else{
            map.put(div,new ArrayList());
            map.get(div).add(new Edge(src,1/num));
        }
    }
    
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        map = new HashMap();
        for(int i = 0; i<equations.size(); i++){
            String src = equations.get(i).get(0);
            String div = equations.get(i).get(1);
            double num = values[i];
            addEdge(src, div, num);
        }
        double[] result = new double[queries.size()];
        for(int i = 0; i<queries.size(); i++){
            String src = queries.get(i).get(0);
            String div = queries.get(i).get(1);
            if(!map.containsKey(src) || !map.containsKey(div)){
                result[i] = -1.0;
            }else if(src.equals(div)){
                result[i] = 1.0;
            }else{
                HashSet<String> vis = new HashSet();
                boolean res = dfs(src, div, result, 1.0, vis, i);
                if(res==false){
                    result[i] = -1.0;
                }
            }
        }
        return result;
        
    }
    
    public boolean dfs(String src, String div,double[] result, double cst, HashSet<String> vis, int i){
        if(src.equals(div)){
            result[i] = cst;
            return true;
        }
        
        vis.add(src);
        for (Edge e : map.get(src)) {
            if (!vis.contains(e.div)) {
                boolean res = dfs(e.div, div, result, cst * e.num,vis, i);
                if (res == true) {
                    return true;
                }
            }

        }
        return false;
    }
}

Result: 
Runtime: 1 ms, faster than 92.13% of Java online submissions for Evaluate Division.
Memory Usage: 37.8 MB, less than 56.77% of Java online submissions for Evaluate Division.
