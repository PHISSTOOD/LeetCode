Given a non-empty array of integers, every element appears three times except for one, 
which appears exactly once. Find that single one.
Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

/*class Solution {
    public int singleNumber(int[] nums) {
        HashMap <Integer,Integer> map = new HashMap();
        int sum = 0;
        for(int i : nums)
        {
            if(!map.containsKey(i))
            {
                map.put(i,1);
                sum += i;
            }else if(map.get(i)==1)
            {
                map.remove(i);
                map.put(i,0);
            }else if(map.get(i)==0)
            {
                sum -= i;
            }
        }
        return sum;
    }
}*/

class Solution {
    public int singleNumber(int[] nums) {
        Arrays.sort(nums);
        for(int i = 0;i<nums.length-1;)
        {
            if(nums[i]==nums[i+1])
            {
                i += 3;
            }
            else
            {
                return nums[i];
            }
        }
        return nums[nums.length-1];
    }
}
    
