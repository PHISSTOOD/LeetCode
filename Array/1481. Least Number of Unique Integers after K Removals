Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.

Solution Description:
Using hashmap to record the number of occurence of each number. And then extract the frequencies and sort it. Using k to minus the smallest frequencies in the array until k<=0. 

Code:
class Solution {
    public int findLeastNumOfUniqueInts(int[] arr, int k) {
        HashMap<Integer, Integer> map = new HashMap();
        for(int i = 0; i<arr.length; i++){
            map.put(arr[i], map.getOrDefault(arr[i], 0)+1);
        }
        int[] help = new int[map.size()];
        int count = 0;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            help[count] = entry.getValue();
            count++;
        }
        Arrays.sort(help);
        count = 0;
        while(k>0){
            k -= help[count];
            count++;
        }
        if(k<0){
            count--;
        }
        return help.length - count;
    }
}

Result:
Runtime: 107 ms, faster than 79.73% of Java online submissions for Least Number of Unique Integers after K Removals.
Memory Usage: 88.8 MB, less than 8.04% of Java online submissions for Least Number of Unique Integers after K Removals.
