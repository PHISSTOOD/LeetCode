Given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other.
You can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. 
You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.
Return the maximum height of the stacked cuboids.

class Solution {
    public int maxHeight(int[][] cuboids) {
        for (int i = 0; i < cuboids.length; i++) Arrays.sort(cuboids[i]);
        Arrays.sort(cuboids, (a,b)->{
            if (a[0] != b[0]) return a[0] - b[0];
            if (a[1] != b[1]) return a[1] - b[1];
            return a[2] - b[2];
        });
        int[] dp = new int[cuboids.length];
        int result = 0;
        for(int i = 0; i<cuboids.length; i++){
            dp[i] = cuboids[i][2];
            for(int j = 0; j<i; j++){
                if(cuboids[i][1]>=cuboids[j][1] && cuboids[i][2]>=cuboids[j][2]){
                    dp[i] = Math.max(dp[i],dp[j]+cuboids[i][2]);
                }
            }
            result = Math.max(result, dp[i]);
        }
        return result;
    }
}

Result:
Runtime: 5 ms, faster than 96.88% of Java online submissions for Maximum Height by Stacking Cuboids .
Memory Usage: 38.6 MB, less than 60.34% of Java online submissions for Maximum Height by Stacking Cuboids .
