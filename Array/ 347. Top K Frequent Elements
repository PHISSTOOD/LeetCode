Given a non-empty array of integers, return the k most frequent elements.

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap();
        for(int i : nums)
        {
            int count = map.getOrDefault(i,0)+1;
            map.put(i,count);
        }
        PriorityQueue<Integer> heap =
            new PriorityQueue<Integer>((n1, n2) -> map.get(n1) - map.get(n2));
        //PriorityQueue<Integer> heap = new PriorityQueue<Integer>((n1,n2)->map.get(n1)-map.get(n2));
        for (int n: map.keySet()) 
        {
            heap.add(n);
            if (heap.size() > k)
                heap.poll();
        }
        List<Integer> result = new ArrayList();
        while(heap.size()>0)
        {
            result.add(heap.poll());
        }
        Collections.reverse(result);
        return result;
    }
}
/*
    // keep k top frequent elements in the heap
    for (int n: count.keySet()) {
      heap.add(n);
      if (heap.size() > k)
        heap.poll();
    }

    // build output list
    List<Integer> top_k = new LinkedList();
    while (!heap.isEmpty())
      top_k.add(heap.poll());
    Collections.reverse(top_k);
    return top_k;
  }
}*/
