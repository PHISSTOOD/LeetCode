Given a non-empty array of integers, return the k most frequent elements.

class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        HashMap<Integer,Integer> map = new HashMap();
        for(int i : nums)
        {
            int count = map.getOrDefault(i,0)+1;
            map.put(i,count);
        }
        PriorityQueue<Integer> heap =
            new PriorityQueue<Integer>((n1, n2) -> map.get(n1) - map.get(n2));
        //PriorityQueue<Integer> heap = new PriorityQueue<Integer>((n1,n2)->map.get(n1)-map.get(n2));
        for (int n: map.keySet()) 
        {
            heap.add(n);
            if (heap.size() > k)
                heap.poll();
        }
        List<Integer> result = new ArrayList();
        while(heap.size()>0)
        {
            result.add(heap.poll());
        }
        Collections.reverse(result);
        return result;
    }
}



 List<Map.Entry<Integer, Integer>> sortedList = new ArrayList(map.entrySet());
            
    Collections.sort(sortedList, new Comparator<Map.Entry<Integer, Integer>> ()
    {
       
        @Override
       public  int compare(Map.Entry<Integer, Integer> o1 , Map.Entry<Integer, Integer> o2){
            if((o2.getValue()) == (o1.getValue())){
                return o2.getKey() -(o1.getKey());
            }
           return (o2.getValue()).compareTo(o1.getValue());
        }
        
    });
    
    int  i =0;
    
    for(Map.Entry<Integer, Integer> entry : sortedList){
        
         
        if(i<k){
            
            res.add(entry.getKey());
            i++;
        }
                    
    }
    
    return res;
}
