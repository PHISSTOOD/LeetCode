Given an array arr.  You can choose a set of integers and remove all the occurrences of these integers in the array.
Return the minimum size of the set so that at least half of the integers of the array are removed.

Solution Description:
Using hashmap to count the frequency of numbers in the array, and record them in a new array. Sort the new array in increasing order.

Code:
class Solution {
    public int minSetSize(int[] arr) {
        Map<Integer,Integer> map = new HashMap();
        for(int i = 0; i<arr.length; i++){
            map.put(arr[i],map.getOrDefault(arr[i],0)+1);
        }
        int[] count = new int[map.size()];
        int i = 0;
        for(int n : map.values()){
            count[i++] = n;
        }
        Arrays.sort(count);
        int sum = 0;
        int result = 0;
        int num = count.length-1;
        while(sum<arr.length/2){
            sum += count[num--];
            result++;
        }
        return result;
    }
}

Result:
Runtime: 29 ms, faster than 84.77% of Java online submissions for Reduce Array Size to The Half.
Memory Usage: 48.7 MB, less than 81.99% of Java online submissions for Reduce Array Size to The Half.
