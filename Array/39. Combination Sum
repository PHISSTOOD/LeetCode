Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sums to target.
The same repeated number may be chosen from candidates unlimited number of times.

class Solution {
    List<List<Integer>> result =  new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        find(candidates, new ArrayList<>(),target,0);
        return result;
        
    }
    private void find (int[] candidates, List<Integer> tempList, int target,int start)
    {
        if(target==0)
        {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = start; i < candidates.length; i++) 
        {
            if (candidates[i] > target) 
            {
                continue;
            }
            tempList.add(candidates[i]);
            find( candidates, tempList, target - candidates[i], i);
            tempList.remove(tempList.size() - 1);
        }
    }
}



