In a row of dominoes, A[i] and B[i] represent the top and bottom halves of the i-th domino. 
(A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)
We may rotate the i-th domino, so that A[i] and B[i] swap values.
Return the minimum number of rotations so that all the values in A are the same, or all the values in B are the same.
If it cannot be done, return -1.

class Solution {
    public int minDominoRotations(int[] A, int[] B) {
        int result = -1;
        int[] dom = new int[6];
        for(int i = 0;i<A.length;i++)
        {
            dom[A[i]-1] = dom[A[i]-1]+1;
            dom[B[i]-1] = dom[B[i]-1]+1;
        }
        for(int i = 0;i<6;i++)
        {
            if(dom[i]>=A.length)
            {
                result = i+1;
            }
        }
        if(result==-1)
        {
            return -1;
        }
        int anum = 0,bnum = 0;
        for(int i=0;i<A.length;i++)
        {
            if(A[i]!=result && B[i]!=result)
            {
                return -1;
            }else if(A[i]!=result)
            {
                anum++;
            }else if(B[i]!=result)
            {
                bnum++;
            }
        }
        return Math.min(anum,bnum);
    }
}


class Solution {
    public int minDominoRotations(int[] A, int[] B) {
        int up = getMin(A, B, A[0]);
        int down = getMin(A, B, B[0]);
        if(up == -1 || down == -1)
            return Math.max(up, down);
        return Math.min(up, down);
    }
    
    private int getMin(int[] A, int[] B, int target) {
        int up = 0;
        int down = 0;
        for(int i = 0; i < A.length; i++) {
            if(A[i] != target && B[i] != target)
                return -1;
            if(A[i] != target) {
                up++;
            }
            if(B[i] != target) {
                down++;
            }
        }
        return Math.min(down,up);
    }   
}
