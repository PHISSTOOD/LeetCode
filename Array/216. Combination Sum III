Find all possible combinations of k numbers that add up to a number n, 
given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.
Note:
All numbers will be positive integers.
The solution set must not contain duplicate combinations.

class Solution {
    List<List<Integer>> result = new ArrayList<>();
    int k = 0;
    int n = 0;
    public List<List<Integer>> combinationSum3(int k, int n) {
        this.k = k;
        this.n = n;
        List<Integer> cur = new ArrayList();
        generate(cur,0,0,0);
        return result;
    }
    private void generate( List<Integer> cur,int now,int i,int sum)
    {
        if(i==k && sum == n)
        {
            result.add(new ArrayList<>(cur));
            return;
        }else if(i<k && sum+now+1<=n)
        {
            for(int j = now+1;j<=9;j++)
            {
                cur.add(j);
                generate(cur,j,i+1,sum+j);
                cur.remove(cur.size()-1);
            }
        }
    }
}
