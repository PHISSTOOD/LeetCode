You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].
For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].
Return the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.
An array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].


Solution 1:
At first, I thpught using recursion to solve this problem, copy the array and try to swap or not swap num in every index, and save those array which meet the requirement. Then
find the minimum result. However, this solution costs more time than limited.

Code:
class Solution {
    int result = Integer.MAX_VALUE;
    public int minSwap(int[] nums1, int[] nums2) {
        swap(nums1, nums2, 0, 0);
        return result;
    }
    
    public void swap(int[] num1, int[] num2, int index, int cur){
        int[] a = Arrays.copyOf(num1, num1.length);
        int[] b = Arrays.copyOf(num2, num2.length);
        if(index==0){
            swap(num1, num2, index+1, cur);
        }else if(num1[index] > num1[index-1] && num2[index]>num2[index-1]){
            if(index==num1.length-1){
                result = Math.min(result, cur);
                return;
            }else{
                swap(num1, num2, index+1, cur);
            }
        }
        int temp = a[index];
        a[index] = b[index];
        b[index] = temp;
        if(index==0){
            swap(a, b, index+1, cur+1);
        }else if(a[index] > a[index-1] && b[index]>b[index-1]){
            if(index==a.length-1){
                result = Math.min(result, cur+1);
                return;
            }else{
                swap(a, b, index+1, cur+1);
            }
        }
    }
}

Result:
Time Limit Exceeded


Solution 2:
Using dynamic programming. We find there are 3 confitions to affect our choice:
1. nums1[i-1] >= nums2[i] || nums2[i-1] >= nums1[i]
2. nums1[i-1] >= nums1[i] || nums2[i-1] >= nums2[i]
3. nums1[i] > nums1[i-1] && nums2[i] > nums2[i-1] && nums1[i] >= nums2[i-1] && nums2[i] > nums1[i-1]

If the first condition happen, we should swap the current index again. If the second condition happens, we should change the keep and swap.
Else, we should modify keep to the minimum of these two numbers and make swap equal to the keep+1.

class Solution {
    public int minSwap(int[] nums1, int[] nums2) {
        int keep = 0;
        int swap = 1;
        for(int i = 1; i<nums1.length; i++){
            if(nums1[i-1] >= nums2[i] || nums2[i-1] >= nums1[i]){
                swap++;
            }else if(nums1[i-1] >= nums1[i] || nums2[i-1] >= nums2[i]){
                int temp = keep;
                keep = swap;
                swap = temp+1;
            }else{
                int m = Math.min(keep, swap);
                keep = m;
                swap = m+1;
            }
        }
        return Math.min(keep, swap);
    }
}

Result:
Runtime: 2 ms, faster than 90.61% of Java online submissions for Minimum Swaps To Make Sequences Increasing.
Memory Usage: 54.5 MB, less than 50.00% of Java online submissions for Minimum Swaps To Make Sequences Increasing.
