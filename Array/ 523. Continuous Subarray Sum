Given a list of non-negative numbers and a target integer k, 
write a function to check if the array has a continuous subarray of size at least 2 that sums up to a multiple of k, 
that is, sums up to n*k where n is also an integer.

brute force:
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        int[] sum = new int[nums.length+1];
        sum[0] = 0;
        int count = 0;
        if(nums.length<2){
            return false;
        }
        for(int i = 0;i<nums.length;i++){
            count += nums[i];
            sum[i+1] = count;
        }
        for(int i = 0;i<sum.length-2;i++){
            for(int j = i+2;j<sum.length;j++){
                if(k==0){
                    if((sum[j]-sum[i])==k){
                        return true;
                    }
                }else{
                    if((sum[j]-sum[i])%k==0){
                        return true;
                    }
                }
            }
        }
        return false;
    }
}

Runtime: 22 ms, faster than 28.04% of Java online submissions for Continuous Subarray Sum.
Memory Usage: 49.4 MB, less than 5.88% of Java online submissions for Continuous Subarray Sum.


Set:
class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
        if(nums.length<2){
            return false;
        }
        for(int i = 1;i<nums.length;i++){
            if((nums[i-1]+nums[i])==0){
                return true;
            }
        }
        if(k==0){
            return false;
        }
        Set<Integer> set = new HashSet();
        int count = 0;
        for(int i = 1;i<nums.length;i++){
            set.add(count%k);
            if(set.contains((count + nums[i-1] + nums[i])%k)){
                return true;
            }
            count += nums[i-1];
        }
        return false;
    }
}

Runtime: 3 ms, faster than 46.77% of Java online submissions for Continuous Subarray Sum.
Memory Usage: 48 MB, less than 5.88% of Java online submissions for Continuous Subarray Sum
