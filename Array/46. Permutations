Given a collection of distinct integers, return all possible permutations.

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        per(nums,ans,0);
        return ans;
        
    }
    void per(int [] nums, List<List<Integer>> ans,int j){
        if(j==nums.length){
            List<Integer> unq = new ArrayList<>();
            for(int u:nums){
                unq.add(u);
            }
            ans.add(unq);
            return;
        }
        
        for(int i=j;i<nums.length;i++){
            swap(i,j,nums);
            per(nums,ans,j+1);
            swap(i,j,nums);
        }
    }
    
    void swap(int i ,int j, int []nums){
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
    }
}

Runtime: 0 ms, faster than 100.00% of Java online submissions for Permutations.
Memory Usage: 41 MB, less than 5.68% of Java online submissions for Permutations.
