You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.)
You may assume all four edges of the grid are surrounded by water.
The area of an island is the number of cells with a value 1 in the island.
Return the maximum area of an island in grid. If there is no island, return 0.

Solution Description:
Same with the solution of 200, the island number. Using DFS.


Code:
class Solution {
    int max = 0;
    int cur = 0;
    public int maxAreaOfIsland(int[][] grid) {
        for(int i=0; i<grid.length; i++)
        {
            for(int j=0; j<grid[0].length; j++)
            {
                if(grid[i][j] == 1)
                {
                    cur = 1;
                    grid[i][j] = 0;
                    dfs(grid, i, j);
                    max = Math.max(cur,max);
                }
            }
        }
        return max;
    }
    private void dfs(int[][] grid,int i,int j)
    {
        if((i-1)>=0 && i<grid.length && j>=0 && j<grid[0].length && grid[i-1][j]==1)
        {
            cur++;
            grid[i-1][j] = 0;
            dfs(grid,i-1,j);
        }
        if(i>=0 && i<grid.length-1 && j>=0 && j<grid[0].length && grid[i+1][j]==1)
        {
            cur++;
            grid[i+1][j] = 0;
            dfs(grid,i+1,j);
        }
        if(i>=0 && i<grid.length && j>=1 && j<grid[0].length && grid[i][j-1]==1)
        {
            cur++;
            grid[i][j-1] = 0;
            dfs(grid,i,j-1);
        }
        if(i>=0 && i<grid.length && j>=0 && j<grid[0].length-1 && grid[i][j+1]==1)
        {
            cur++;
            grid[i][j+1] = 0;
            dfs(grid,i,j+1);
        }
    }
}

Result:
Runtime: 2 ms, faster than 99.56% of Java online submissions for Max Area of Island.
Memory Usage: 39.6 MB, less than 69.77% of Java online submissions for Max Area of Island.
