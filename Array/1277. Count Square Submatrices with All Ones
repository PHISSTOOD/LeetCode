Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

class Solution {
    public int countSquares(int[][] matrix) {
        int result = 0;
        for(int i = 0; i<matrix.length; i++){
            for(int j = 0; j<matrix[0].length;j++){
                if(matrix[i][j]==1){
                    if((i-1)>=0 && (j-1)>=0){
                        int cur = Math.min(matrix[i-1][j-1],Math.min(matrix[i-1][j],matrix[i][j-1]))+1;
                        matrix[i][j] = cur;
                    }
                    result+= matrix[i][j];
                }
            }
        }
        return result;
    }
}

Result:
Runtime: 8 ms, faster than 32.66% of Java online submissions for Count Square Submatrices with All Ones.
Memory Usage: 65.1 MB, less than 12.15% of Java online submissions for Count Square Submatrices with All Ones.
