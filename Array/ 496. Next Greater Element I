The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.
You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2.
If there is no next greater element, then the answer for this query is -1.
Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

Solution Description:
Using stack and hashamp to solve this problem, stack to find next greater number map to find the answer quickly.
1. Iterating the nums2 array, when the new num is bigger than the peak of the stack, then put the (nums2[peak],nums2[i]) into the map, else push the new num into the stack.
2. Iterating the nums1, if map contains the key nums1[i], return the value or return -1.

Code:
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int[] result = new int[nums1.length];
        Stack<Integer> stack = new Stack();
        Map<Integer,Integer> map = new HashMap();
        stack.push(0);
        int[] help = new int[nums2.length];
        for(int i = 1;i<nums2.length;i++){
            while(!stack.isEmpty() && nums2[i]>nums2[stack.peek()]){
                map.put(nums2[stack.pop()],nums2[i]);
            }
            stack.push(i);
        }
        for(int i = 0; i<nums1.length; i++){
            result[i] = map.getOrDefault(nums1[i],-1);
        }
        return result;
    }
}

Result:
Runtime: 2 ms, faster than 98.63% of Java online submissions for Next Greater Element I.
Memory Usage: 39.1 MB, less than 70.08% of Java online submissions for Next Greater Element I.
