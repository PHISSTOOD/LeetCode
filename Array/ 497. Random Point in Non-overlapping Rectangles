Given a list of non-overlapping axis-aligned rectangles rects, write a function pick which randomly and uniformily picks an integer point 
in the space covered by the rectangles.
Note:
An integer point is a point that has integer coordinates. 
A point on the perimeter of a rectangle is included in the space covered by the rectangles. 
ith rectangle = rects[i] = [x1,y1,x2,y2], where [x1, y1] are the integer coordinates of the bottom-left corner, 
and [x2, y2] are the integer coordinates of the top-right corner.
length and width of each rectangle does not exceed 2000.
1 <= rects.length <= 100 pick return a point as an array of integer coordinates [p_x, p_y] pick is called at most 10000 times.

Solution Description:
In the solution function, when we get a new rectangle, we calculate it's area and add it with the sum of all rectangles, using the current sum of area to represent the
rectangle. When we want to pick a rectangle, we can create a random number from 0 to sum of area, thus we can ensure the probablity of all rectangles is same.
As for the treemap, treemap is a data structure which is similar to hashmap, but it will sort the key when we put them into the map.

Code:
class Solution {
    Random random = new Random();
    TreeMap<Integer, int[]> map = new TreeMap();
    int sum = 0;

    public Solution(int[][] rects) {
        for(int[] rect : rects){
            int [] rectangeCoordinates = rect;
            int area = (rect[3]-rect[1]+1)*(rect[2]-rect[0]+1);
            sum += area;
            map.put(sum,rectangeCoordinates);
        }
    }
    
    public int[] pick() {
        int ran = random.nextInt(sum)+1;
        int[] cur = new int[4];
        for(Map.Entry<Integer, int[]> entry : map.entrySet()) {
            if(ran<=entry.getKey()){
                cur = entry.getValue();
                break;
            }
        }
        int width = cur[3]-cur[1]+1;
        int length = cur[2]-cur[0]+1;
        int[] result = new int[2];
        result[0] = cur[0] + random.nextInt(length);
        result[1] = cur[1] + random.nextInt(width);
        return result;
    }
}

Result:
Runtime: 57 ms, faster than 47.59% of Java online submissions for Random Point in Non-overlapping Rectangles.
Memory Usage: 45.3 MB, less than 83.45% of Java online submissions for Random Point in Non-overlapping Rectangles.
