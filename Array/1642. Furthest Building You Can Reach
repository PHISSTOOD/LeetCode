You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.
You start your journey from building 0 and move to the next building by possibly using bricks or ladders.
While moving from building i to building i+1 (0-indexed),
If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.
Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.

class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        PriorityQueue<Integer> queue = new PriorityQueue();
        int index = 0;
        for(; index<heights.length-1; index++){
            if(heights[index+1]<=heights[index]){
                continue;
            }else{
                queue.offer(heights[index+1]-heights[index]);
                if(queue.size()>ladders){
                    bricks -= queue.poll();
                    if(bricks<0){
                        break;
                    }
                }
            }
        }
        return index;
    }
}

Result:
Runtime: 17 ms, faster than 84.68% of Java online submissions for Furthest Building You Can Reach.
Memory Usage: 53.4 MB, less than 47.70% of Java online submissions for Furthest Building You Can Reach.
