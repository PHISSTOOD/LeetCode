Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.
A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:
All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int dir[] = {-1, 0, 1, 0, -1, 1, 1, -1, -1};
        int steps = 0;
        int n = grid.length;
        if(grid[0][0] == 1){
            return -1;
        }
        Queue<int[]> queue = new LinkedList();
        queue.add(new int[] {0,0});
        grid[0][0] = 1;
        while(!queue.isEmpty()){
            int size = queue.size();
            steps++;
            for(int i = 0;i<size;i++){
                int[] node = queue.poll();
                if(node[0] == n-1 && node[1] == n-1){
                    return steps;
                }
                for(int k = 0;k<8;k++){
                    int r1 = node[0] + dir[k];
                    int c1 = node[1] + dir[k+1];
                    if(r1>=0 && c1 >= 0 && r1 < n && c1 < n && grid[r1][c1] == 0){
                        grid[r1][c1] = 1;
                        queue.add(new int[] {r1,c1});
                    }
                }
            }
        }
        return -1; 
    }
}

Result:
Runtime: 9 ms, faster than 99.74% of Java online submissions for Shortest Path in Binary Matrix.
Memory Usage: 40.6 MB, less than 43.79% of Java online submissions for Shortest Path in Binary Matrix.
