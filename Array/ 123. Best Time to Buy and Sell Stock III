Say you have an array for which the ith element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most two transactions.
Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).


class Solution {
    1:
    public int maxProfit(int[] prices) {
        int result = 0;
        for(int i = 0;i<prices.length;i++)
        {
            int r1 = find(prices,0,i);
            int r2 = find(prices,i,prices.length);
            result = Math.max(result,r1+r2);
        }
        return result;
    }
    private int find(int[] prices, int start, int end)
    {
        int min = prices[start];
        int maxprofit = 0;
        for(int i = start+1;i<end;i++)
        {
            maxprofit = Math.max(maxprofit,prices[i]-min);
            min = Math.min(min,prices[i]);
        }
        return maxprofit;
    }
    
    
    
    2:
    public int maxProfit(int[] prices) {
      if(prices.length<=1)
          return 0;
      
      int  one_transaction_profit = 0;
      int  two_transaction_profit = 0;
      int min_price = prices[0];
      int max_diff = -prices[0];
      
      for(int i = 1; i< prices.length; i++) {
         one_transaction_profit  = Math.max(one_transaction_profit, prices[i] - min_price);
         min_price = Math.min(min_price, prices[i]);
         two_transaction_profit = Math.max(two_transaction_profit, prices[i] + max_diff);
         max_diff = Math.max(max_diff, one_transaction_profit - prices[i]);
      }
      
      return two_transaction_profit;
    }
}
