Given an array of integers arr, sort the array by performing a series of pancake flips.
In one pancake flip we do the following steps:
Choose an integer k where 1 <= k <= arr.length.
Reverse the sub-array arr[0...k-1] (0-indexed).
For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.
Return an array of the k-values corresponding to a sequence of pancake flips that sort arr. 
Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.

class Solution {
    public List<Integer> pancakeSort(int[] arr) {
        List<Integer> result = new ArrayList();
        for(int i = arr.length-1; i>=1; i--){
            int next = 0;
            for(int j = 0; j<=i; j++){
                if(arr[j]>=arr[next]){
                    next = j;
                }
            }
            if(next==i){
                continue;
            }else{
                if(next!=0){
                    reverse(arr, next);
                    result.add(next+1);
                }
                reverse(arr, i);
                result.add(i+1);
            }
        }
        return result;
    }
    
    public void reverse(int[] arr, int end){
        int i = 0;
        while(i<end){
            int temp = arr[i];
            arr[i] = arr[end];
            arr[end] = temp;
            i++;
            end--;
        }
    }
}

Result:
Runtime: 1 ms, faster than 100.00% of Java online submissions for Pancake Sorting.
Memory Usage: 38.8 MB, less than 92.31% of Java online submissions for Pancake Sorting.
