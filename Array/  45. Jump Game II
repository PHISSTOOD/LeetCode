Given an array of non-negative integers, you are initially positioned at the first index of the array.
Each element in the array represents your maximum jump length at that position.
Your goal is to reach the last index in the minimum number of jumps.

class Solution {
    public int jump(int[] nums) {
        int[] dp = new int[nums.length-1];
        if(nums.length<=1)
        {
            return 0;
        }
        if( nums[0]+1>=nums.length)
        {
            return 1;
        }
        for(int i = nums.length-2;i>=0;i--)
        {
            if(nums[i]+i+1>=nums.length)
            {
                dp[i] = 1;
            }else if(nums[i]==0)
            {
                dp[i] = 1000000;
            }else
            {
                int min = 1000000;
                for(int j = i+nums[i];j>i;j--)
                {
                    min = Math.min(dp[j],min);
                }
                dp[i] = min+1;
            }
        }
        return dp[0];
    }
}
Result:
Runtime: 188 ms, faster than 22.58% of Java online submissions for Jump Game II.
Memory Usage: 41.2 MB, less than 26.92% of Java online submissions for Jump Game II.

class Solution {
    public int jump(int[] nums) {
        if (nums.length <=1) return 0;
        int start = 0;
        int result = 0;
        int end = 0;
        while(end<nums.length-1)
        {
            int old = end;
            for(int i = start;i<old+1;i++)
            {
                end = Math.max(end,nums[i]+i);
            }
            start = old+1;
            result++;
        }
        return result;
    }
}
Result:
Runtime: 1 ms, faster than 99.96% of Java online submissions for Jump Game II.
Memory Usage: 39.1 MB, less than 100.00% of Java online submissions for Jump Game II.
