Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. 
Find the smallest divisor such that the result mentioned above is less than or equal to threshold.
Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).
It is guaranteed that there will be an answer.

Solution Description:
Using binary search to find the divisor.

Code:
class Solution {
    public int smallestDivisor(int[] nums, int threshold) {
        int max = Integer.MIN_VALUE;
        for(int i : nums){
            max = Math.max(i,max);
        }
        int start = 1;
        int end = max;
        while(start<end){
            int mid = (start+end)/2;
            int cur = 0;
            for(int i : nums){
                cur += (i+mid-1)/mid;
            }
            if(cur<=threshold){
                end = mid;
            }else{
                start = mid+1;
            }
        }
        return end;
    }
}

Result:
Runtime: 7 ms, faster than 98.10% of Java online submissions for Find the Smallest Divisor Given a Threshold.
Memory Usage: 43.2 MB, less than 71.47% of Java online submissions for Find the Smallest Divisor Given a Threshold.
