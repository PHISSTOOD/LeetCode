Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements.You may return the answer in any order.
The given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence.

Soulution Description:

Code:
class Solution {
    public List<List<Integer>> findSubsequences(int[] nums) {
        List<List<Integer>> result = new ArrayList();
        if(nums.length<=1){
            return result;
        }
        List<Integer> cur = new ArrayList();
        find(result, nums, cur, 0);
        return result;
    }
    public void find(List<List<Integer>> result, int[] nums, List<Integer> cur, int pos){
        if(cur.size()>1){
            List<Integer> temp = new ArrayList<>(cur);
            result.add(temp);
        }
        if(pos>=nums.length){
            return;
        }
        Set<Integer> set = new HashSet();
        for(int i = pos;i<nums.length;i++){
            if(cur.size()==0){
                if(!set.contains(nums[i])){
                    cur.add(nums[i]);
                    set.add(nums[i]);
                    find(result, nums, cur, i+1);
                    cur.remove(cur.size()-1);
                }
            }else{
                if(nums[i]>=cur.get(cur.size()-1) && !set.contains(nums[i])){
                    cur.add(nums[i]);
                    set.add(nums[i]);
                    find(result, nums, cur, i+1);
                    cur.remove(cur.size()-1);
                }
            }
        }
    }
}

Result:
Runtime: 4 ms, faster than 93.65% of Java online submissions for Increasing Subsequences.
Memory Usage: 44.4 MB, less than 99.75% of Java online submissions for Increasing Subsequences.
