You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. 
You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.
Return true if you can make this square and false otherwise.

class Solution {
    public boolean makesquare(int[] matchsticks) {
        int sum = 0;
        for(int num : matchsticks){
            sum += num;
        }
        if(sum%4!=0){
            return false;
        }
        boolean[] use = new boolean[matchsticks.length];
        return dfs(0, 0, 0, matchsticks, use, sum/4);
    }
    
    public boolean dfs(int num, int cur, int index, int[] matchsticks, boolean[] use, int target){
        if(num==4){
            return true;
        }
        if(cur==target){
            return dfs(num+1, 0, 0, matchsticks, use, target);
        }else{
            for(int i = index; i<matchsticks.length; i++){
                if(use[i]==false && cur+matchsticks[i]<=target){
                    use[i] = true;
                    boolean curResult = dfs(num, cur+matchsticks[i], i+1, matchsticks, use, target);
                    use[i] = false;
                    if(curResult==true){
                        return true;
                    }
                }
            }
            return false;
        }
    }
}


Result:
Runtime: 8 ms, faster than 91.40% of Java online submissions for Matchsticks to Square.
Memory Usage: 36.4 MB, less than 82.07% of Java online submissions for Matchsticks to Square.
