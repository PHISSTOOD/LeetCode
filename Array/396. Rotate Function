Given an array of integers A and let n to be its length.
Assume Bk to be an array obtained by rotating the array A k positions clock-wise, we define a "rotation function" F on A as follow:
F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1].
Calculate the maximum value of F(0), F(1), ..., F(n-1).

class Solution {
    public int maxRotateFunction(int[] A) {
        int n = A.length;
        int total = 0;
        int result = 0;
        for(int i = 0;i<A.length;i++){
            total += A[i];
            result += A[i]*i;
        }
        int last = result;
        for(int i = 1;i<A.length;i++){
            last = last+total-n*A[n-i];
            result = Math.max(result,last);
        }
        return result;
    }
}

Runtime: 1 ms, faster than 100.00% of Java online submissions for Rotate Function.
Memory Usage: 39.5 MB, less than 100.00% of Java online submissions for Rotate Function.
