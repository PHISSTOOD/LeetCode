Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

Solution Description:
The main idea of this probelm is record the sum, I use map to record it. When we iterate a new num, if the sum == 0, we can compare the length with the result directly, 
if it isn't 0, we read it in the map and the length equals the current position minus the position when the result first occur.

class Solution {
    public int findMaxLength(int[] nums) {
        for(int i = 0; i<nums.length; i++){
            if(nums[i]==0){
                nums[i] = -1;
            }
        }
        Map<Integer,Integer> count = new HashMap();
        int result = 0;
        int sum=0;
        int start=0;
        int end=0;
        for(int i=0;i<nums.length;i++)
        {
            sum += nums[i];
            if(sum==0){
                result = Math.max(result,i+1);
            }else if(count.containsKey(sum)){
                int cur = count.get(sum);
                result = Math.max(result,i-cur);
            }else{
                count.put(sum,i);
            }
        }
        return result;
    }
}
