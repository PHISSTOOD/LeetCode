You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order).
Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.
Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, 
where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).


Solution description:
Override comparator function to sort people, taller people will be sorted on the left, when two people have same height, the people who has smaller k will be sorted on the left.
then insert the people.
class Solution {
    public int[][] reconstructQueue(int[][] people) {
        int[][] result = new int[people.length][2];
        Arrays.sort(people,new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2){
                if(o1[0]!=o2[0]){
                    return o2[0]-o1[0];
                }else{
                    return o1[1]-o2[1];
                }
            }
        });
        List<int[]> help = new ArrayList();
        for(int i = 0;i<people.length;i++){
            help.add(people[i][1],people[i]);
        }
        for(int i = 0;i<people.length;i++){
            result[i][0] = help.get(i)[0];
            result[i][1] = help.get(i)[1];
        }
        return result;
    }
}

Result:
Runtime: 6 ms, faster than 72.75% of Java online submissions for Queue Reconstruction by Height.
Memory Usage: 39.6 MB, less than 91.37% of Java online submissions for Queue Reconstruction by Height.
