Given an array which consists of non-negative integers and an integer m, 
you can split the array into m non-empty continuous subarrays. 
Write an algorithm to minimize the largest sum among these m subarrays.

class Solution {
    private int result = Integer.MAX_VALUE;
    public int splitArray(int[] nums, int m) {
        int[] sum = new int[nums.length];
        int count = 0;
        for(int i = 0;i<nums.length;i++)
        {
            count += nums[i];
            sum[i] = count; 
        }
        split(0,0,0,sum,m);
        return result;
    }
    private void split(int cur,int level,int largestsum,int[] sum,int m)
    {
        if(cur==sum.length && level ==m)
        {
            result = Math.min(result,largestsum);
            return;
        }else
        {
            if(level==m-1)
            {
                int count = 0;
                if(cur == 0)
                {
                    count = sum[sum.length-1] - 0;
                }else
                {
                    count = sum[sum.length-1] - sum[cur-1];
                }
                largestsum = Math.max(largestsum,count);
                split(sum.length,level+1,largestsum,sum,m);
            }else
            {
                for(int i = cur;i<sum.length-m+level+1;i++)
                {
                    int count = 0;
                    if(cur == 0)
                    {
                        count = sum[i] - 0;
                    }else
                    {
                        count = sum[i] - sum[cur-1];
                    }
                    largestsum = Math.max(largestsum,count);
                    split(i+1,level+1,largestsum,sum,m);
                }
            }
        }
    }
}


class Solution {
    public int splitArray(int[] nums, int m) {
        int sum = 0;
        int minElem = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            sum +=nums[i];
            if (minElem < nums[i]) minElem = nums[i];
        }
        if (m==1) return sum;
    
        int lo = minElem > sum/m ? minElem : sum/m;
        int hi = sum;
    
        boolean isDefaultMin = true;
        int minResult = Integer.MAX_VALUE;
    
	    while(lo<=hi) {
		    int mid = (lo+hi)/2;
            int splits = getSplitsByCapacity(nums, mid);
            if (splits<m) {
                //System.out.println("decreasing hi to " + (mid-1));
        	    hi=mid-1;
            } else if (splits>m) {
                //System.out.println("increasing lo to " + (mid+1));
                lo=mid+1;
            } else if (splits==m) {
                if (minResult>mid) {
                    minResult = mid;
                    hi = mid-1;
                    isDefaultMin = false;
                }
            }
        }
        return isDefaultMin ? minElem : minResult;
    }
    private static int getSplitsByCapacity(int[]nums, int arrCapacity) {
	    int splits = 0;
	    int index = 0;
	    int sum = 0;
	    while(index<nums.length) {
		    if (sum + nums[index]<= arrCapacity) {
		        sum+=nums[index];
        	    index++;
            } else {
        	    splits++;
			    sum=0;
            }
        }
        splits++;
        return splits;
    }
}
