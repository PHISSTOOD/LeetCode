Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature.
If there is no future day for which this is possible, put 0 instead.
For example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].

Solution descrition:
In this question, we use a stack to restore those days which haven't found a warmer day. And iterate the array, when we have a new day, we just need to ccompare it with the peek of
the stack.
If it is warmer than the peek, pop the peek and store the peiord.
If it is cool than peek, push it in the stack.


class Solution {
    public int[] dailyTemperatures(int[] T) {
        int[] result = new int[T.length];
        if(T.length<2){
            return result;
        }
        Stack<Integer> stack = new Stack();
        stack.push(0);
        for(int i = 1;i<T.length;i++){
            while(!stack.isEmpty()){
                if(T[i]>T[stack.peek()]){
                    result[stack.peek()] = i - stack.pop();
                }else{
                    break;
                }
            }
            stack.push(i);
        }
        return result;
    }
}

result:
Runtime: 15 ms, faster than 61.27% of Java online submissions for Daily Temperatures.
Memory Usage: 47.2 MB, less than 58.90% of Java online submissions for Daily Temperatures.
