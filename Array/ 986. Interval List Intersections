Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.
Return the intersection of these two interval lists.
(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  
The intersection of two closed intervals is a set of real numbers that is either empty, 
or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

class Solution {
    public int[][] intervalIntersection(int[][] A, int[][] B) {
        List<int[]> mid = new ArrayList();
        int indexa = 0;
        int indexb = 0;
        while(indexa<A.length && indexb<B.length)
        {
            int start = Math.max(A[indexa][0],B[indexb][0]);
            int end = Math.min(A[indexa][1],B[indexb][1]);
            if(start<=end)
            {
                int[] help = new int[2];
                help[0] = start;
                help[1] = end;
                mid.add(help);
            }
            if(A[indexa][1]>B[indexb][1])
            {
                indexb++;
            }else if(B[indexb][1]>A[indexa][1])
            {
                indexa++;
            }else
            {
                indexa++;indexb++;
            }
        }
        int[][] result = new int[mid.size()][2];
        for(int i = 0;i<mid.size();i++)
        {
            int[] help = mid.get(i);
            result[i][0] = help[0];
            result[i][1] = help[1];
        }
        return result;
    }
}

faster than 26.58% of Java online submissions for Interval List Intersections.
Memory Usage: 45.3 MB, less than 72.97%
