We have n chips, where the position of the ith chip is position[i].
We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:
position[i] + 2 or position[i] - 2 with cost = 0.
position[i] + 1 or position[i] - 1 with cost = 1.
Return the minimum cost needed to move all the chips to the same position.

class Solution {
    public int minCostToMoveChips(int[] position) {
        int countOfOdd = 0;
        int countOfEven = 0;
        for(int num : position){
            if(num%2==1){
                countOfOdd++;
            }else{
                countOfEven++;
            }
        }
        return Math.min(countOfEven, countOfOdd);
    }
}

Result:
Runtime: 0 ms, faster than 100.00% of Java online submissions for Minimum Cost to Move Chips to The Same Position.
Memory Usage: 36.4 MB, less than 89.87% of Java online submissions for Minimum Cost to Move Chips to The Same Position.
