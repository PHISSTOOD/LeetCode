Given a string s, find the length of the longest substring without repeating characters.

Solution:
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] count = new int[100];
        int start = 0;
        int end = 0;
        int result = 0;
        for(;end<s.length();){
            if(count[s.charAt(end)-' ']==0){
                count[s.charAt(end)-' ']++;
                end++;
                result = Math.max(result,end-start);
            }else{
                while(s.charAt(start)!=s.charAt(end)){
                    count[s.charAt(start)-' ']--;
                    start++;
                }
                count[s.charAt(start)-' ']--;
                start++;
            }
        }
        return result;
    }
}

Result:
Runtime: 2 ms, faster than 99.83% of Java online submissions for Longest Substring Without Repeating Characters.
Memory Usage: 38.9 MB, less than 84.44% of Java online submissions for Longest Substring Without Repeating Characters.
