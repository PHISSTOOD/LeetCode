Say you have an array for which the i-th element is the price of a given stock on day i.
Design an algorithm to find the maximum profit. You may complete at most k transactions.
Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

class Solution {
    public int maxProfit(int k, int[] prices) {
        if(k<1 || prices.length<2)
        {
            return 0;
        }
        int count = 0;
        int maxprofit = 0;
        for(int i = 1;i<prices.length;i++)
        {
            if(prices[i]>prices[i-1])
            {
                count ++;
                maxprofit += prices[i]-prices[i-1];
            }
        }
        if(k>=count)
        {
            return maxprofit;
        }
        int[] cost = new int[k+1];
        int[] profit = new int[k+1];
        for(int i = 1;i<k+1;i++)
        {
            cost[i] = Integer.MAX_VALUE;
        }
        for(int cur:prices)
        {
            for(int i = 1;i<k+1;i++)
            {
                cost[i] = Math.min(cost[i],cur-profit[i-1]);
                profit[i] = Math.max(profit[i],cur-cost[i]);
            }
        }
        return profit[k];
    }
}
