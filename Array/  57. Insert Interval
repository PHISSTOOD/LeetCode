Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).
You may assume that the intervals were initially sorted according to their start times.

Summary of problem-solving ideaï¼š

Iterate all parameters in this intervals and compare with newInterval, is the current interval[1] is bigger than newInterval[0], thus,
we will know the position to insert newInterval. Then, merge the newInterval and Intervals which are overlap with newInterval. Then, 
add other Intervals in new arraylist.

class Solution {
    public int[][] insert (int[][] intervals, int[] newInterval){
        if(intervals.length == 0)
            return new int[][]{{newInterval[0],newInterval[1]}};
        ArrayList<int[]> list = new ArrayList();
        int idx = 0;
        while(idx<intervals.length && intervals[idx][1]< newInterval[0]){
            list.add(intervals[idx]);
            idx++;
        }
        int min = newInterval[0];
        int max = newInterval[1];
        while(idx<intervals.length && intervals[idx][0]<=max){
            min = Math.min(min,intervals[idx][0]);
            max = Math.max(max,intervals[idx][1]);
            idx++;
        }
        list.add(new int[] {min,max});
        list.addAll(Arrays.asList(intervals).subList(idx, intervals.length));
        return list.toArray(new int[list.size()][]);
    }
}
Runtime: 2 ms, faster than 47.24% of Java online submissions for Insert Interval.
Memory Usage: 41.3 MB, less than 78.13% of Java online submissions for Insert Interval.

