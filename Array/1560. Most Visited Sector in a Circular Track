Given an integer n and an integer array rounds. We have a circular track which consists of n sectors labeled from 1 to n. 
A marathon will be held on this track, the marathon consists of m rounds. The ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. 
For example, round 1 starts at sector rounds[0] and ends at sector rounds[1]
Return an array of the most visited sectors sorted in ascending order.
Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).

solution description:
In this problem, we need to find those sectors which were visited most, and the player run marathon lap by lap, so we just need to consider the start and the end.
which means we only need to consider the realation between the first number and the last number of the array. If the last number is bigger than the first, we just
need to add those sectors which in the range of first number to the last. If the last number is smaller than the first, which means the player starts running 
another lap. We need to add the first number to n and 1 to the last number into list.

class Solution {
    public List<Integer> mostVisited(int n, int[] rounds) {
        List<Integer> result = new ArrayList();
        if(rounds.length==0){
            return result;
        }
        if(rounds[rounds.length-1]>=rounds[0]){
            for(int i = rounds[0];i<=rounds[rounds.length-1];i++){
                result.add(i);
            }
        }else{
            for(int i = 1;i<=rounds[rounds.length-1];i++){
                result.add(i);
            }
            for(int i = rounds[0];i<=n;i++){
                result.add(i);
            }
        }
        return result;
    }
}

Runtime: 1 ms, faster than 98.67% of Java online submissions for Most Visited Sector in a Circular Track.
Memory Usage: 39.7 MB, less than 88.30% of Java online submissions for Most Visited Sector in a Circular Track.
