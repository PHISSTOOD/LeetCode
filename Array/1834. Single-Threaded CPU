You are given n tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei,
processingTimei] means that the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.
You have a single-threaded CPU that can process at most one task at a time and will act in the following way:
If the CPU is idle and there are no available tasks to process, the CPU remains idle.
If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.
Once a task is started, the CPU will process the entire task without stopping.
The CPU can finish a task then start a new one instantly.
Return the order in which the CPU will process the tasks.

Solution Description:
Using priorityqueue

Code:
class Solution {
    public class Task{
        int enqueueTime;
        int processingTime;
        int index;
        public Task(int enqueueTime, int processingTime, int index){
            this.enqueueTime = enqueueTime;
            this.processingTime =processingTime;
            this.index = index;
        }
    }
    public int[] getOrder(int[][] tasks) {
        // check some corner case
        int[] result = new int[tasks.length];
        int resultIndex = 0;
        Task[] needdo = new Task[tasks.length];
        for(int i = 0; i<tasks.length; i++){
            Task cur = new Task(tasks[i][0],tasks[i][1],i);
            needdo[i] = cur;
        }
        Arrays.sort(needdo, new enqueue());
        PriorityQueue<Task> queue = new PriorityQueue<>(new Duration());
        int taskindex = 0;
        int curtime = 0;
        while(resultIndex < tasks.length){
            while(taskindex<tasks.length && needdo[taskindex].enqueueTime<=curtime){
                queue.offer(needdo[taskindex]);
                taskindex++;
            }
            if(queue.size()==0){
                curtime = needdo[taskindex].enqueueTime;
                continue;
            }
            Task cur = queue.poll();
            curtime += cur.processingTime;
            result[resultIndex++] = cur.index;
        }
        return result;
    }
    
    public class enqueue implements Comparator<Task>{
        @Override
        public int compare(Task a, Task b){
            return a.enqueueTime - b.enqueueTime;
        }
    }
    
    public class Duration implements Comparator<Task>{
        @Override
        public int compare(Task a, Task b){
            if(a.processingTime == b.processingTime){
                return a.index - b.index;
            }else{
                return a.processingTime - b.processingTime;
            }
        }
    }
}

Result:
Runtime: 90 ms, faster than 99.36% of Java online submissions for Single-Threaded CPU.
Memory Usage: 96.3 MB, less than 63.91% of Java online submissions for Single-Threaded CPU.
