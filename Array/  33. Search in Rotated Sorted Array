Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm's runtime complexity must be in the order of O(log n).

class Solution {
    public int search(int[] nums, int target) {
        int i,n;
        n = nums.length;
        if(n==0)
        {
            return -1;
        }
        if(target >= nums[0])
        {
            i = 0;
            for(;i<n;i++)
            {
                if(nums[i] == target)
                {
                    return i;
                }
                if(i<n-1 && nums[i]>nums[i+1])
                {
                    return -1;
                }
            }
        }
        else
        {
            for(i = n-1;i>=0;i--)
            {
                if(nums[i] == target)
                {
                    return i;
                }
                if(i-1>=0 && nums[i-1]>nums[i])
                {
                    return -1;
                }
            }
        }
        return -1;
    }
}
