Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

Solution description:
In this question, we use DP. First, we need to judge if this array is valid, like if its length is bigger than 1 and the sum of this array is even,
Then, what we need to record in DP, is whether the numbers in this array can reach the target num.

class Solution{
    public boolean canPartition(int [] nums){
        if(nums.length<=1){
            return false;
        }
        int sum = 0;
        for(int i : nums){
            sum += i;
        }
        if(sum%2 == 1){
            return false;
        }
        Arrays.sort(nums);
        sum /=2;
        int[][] dp = new int[nums.length][sum+1];
        dp[0][0] = 1;
        dp[0][nums[0]] = 1;
        for( int i = 1;i<nums.length;i++){
            for( int j = 0;j<sum+1;j++){
                if(dp[i-1][j]==1){
                    dp[i][j] = 1;
                    if(j+nums[i]<=sum){
                         dp[i][j+nums[i]]=1;
                    }
                }
            }
            if(dp[i][sum]==1){
                return true;
            }
        }
        return false;
    }
}

Result:
Runtime: 27 ms, faster than 66.20% of Java online submissions for Partition Equal Subset Sum.
Memory Usage: 48.8 MB, less than 38.81% of Java online submissions for Partition Equal Subset Sum.
