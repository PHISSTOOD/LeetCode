You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.
Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.
A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.
A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.
We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. 
A ball gets stuck if it hits a "V" shaped pattern between two boards or if a board redirects the ball into either wall of the box.
Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top,
or -1 if the ball gets stuck in the box.

class Solution {
    public int[] findBall(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] result = new int[n];
        for(int i=0;i<n;i++){
            findResult(grid,i,m,n,result);
        }
        return result;
        
    }
    
    public void findResult(int[][] grid, int index, int m, int n, int[] result){
        int row=0;
        int column=index;
        while(row < m && column < n){
            if(grid[row][column] == 1){ 
                if(column+1 < n){
                    if(grid[row][column+1] == -1){ 
                        result[index]=-1;
                        return;
                    }
                    row++;
                    column++;
                } else{
                    result[index]=-1;
                    return;
                }
            } else if(grid[row][column] == -1){
                if(column-1 >= 0){
                    if(grid[row][column-1] == 1){
                        result[index]=-1;
                        return;
                    }
                    row++;
                    column--;
                } else{
                    result[index]=-1;
                    return;
                }
            }
        }
        result[index]=column;
        
    }
}

Result:
Runtime: 0 ms, faster than 100.00% of Java online submissions for Where Will the Ball Fall.
Memory Usage: 52.5 MB, less than 8.67% of Java online submissions for Where Will the Ball Fall.
