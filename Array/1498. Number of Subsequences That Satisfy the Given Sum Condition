Given an array of integers nums and an integer target.
Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. 
Since the answer may be too large, return it modulo 109 + 7.
Solution Description:
Sort the array and using slide window to solve this problem.

Code:
class Solution {
    public int numSubseq(int[] nums, int target) {
        final int mod = 1000000007;
        Arrays.sort(nums);
        int[] power = new int[nums.length+1];
        power[0] = 1;
        for(int i = 1; i<=nums.length; i++){
            power[i] = power[i-1]*2 % mod;
        }
        int start = 0;
        int end = nums.length-1;
        int result = 0;
        while(start<=end){
            if(nums[start]+nums[end]<=target){
                result = (result+power[end-start])%mod;
                start++;
            }else{
                end--;
            }
        }
        return result;
    }
}

Result:
Runtime: 39 ms, faster than 28.32% of Java online submissions for Number of Subsequences That Satisfy the Given Sum Condition.
Memory Usage: 74.4 MB, less than 5.78% of Java online submissions for Number of Subsequences That Satisfy the Given Sum Condition.
