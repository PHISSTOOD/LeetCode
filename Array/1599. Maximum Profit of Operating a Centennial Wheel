You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. 
You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.
You are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). 
This means you must rotate the wheel i times before customers[i] arrive. 
Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.
You can stop the wheel at any time, including before serving all customers. 
If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. 
Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.
Return the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.

Solution description:
Iterate the array.

class Solution {
    public int minOperationsMaxProfit(int[] customers, int boardingCost, int runningCost) {
        int maxProfit = 0;
        int result = -1;
        int waitCustomer = 0;
        if(customers==null || customers.length==0){
            return -1;
        }
        waitCustomer += customers[0];
        int order = 1;
        int rotate = 1;
        int cur = 0;
        int countcustomer = 0;
        while(waitCustomer>0 || order<customers.length){
            countcustomer += Math.min(waitCustomer,4);
            cur = countcustomer*boardingCost - rotate*runningCost;
            waitCustomer -= Math.min(waitCustomer,4);
            if(order<customers.length){
                waitCustomer += customers[order];
            }
            order++;
            if(cur>maxProfit){
                result = rotate;
                maxProfit = cur;
            }
           
            rotate++;
        }
        return result;
    }
}
Runtime: 12 ms, faster than 100.00% of Java online submissions for Maximum Profit of Operating a Centennial Wheel.
Memory Usage: 49.1 MB, less than 100.00% of Java online submissions for Maximum Profit of Operating a Centennial Wheel.
