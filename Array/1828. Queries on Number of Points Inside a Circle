You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.
You are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.
For each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.
Return an array answer, where answer[j] is the answer to the jth query.

Solution Description:
Iterate the queries and then iterate all the points to calculate if it inside the circle.

Code:
class Solution {
    public int[] countPoints(int[][] points, int[][] queries) {
        int[] result = new int[queries.length];
        for(int i = 0; i<queries.length; i++){
            int count = 0;
            int x = queries[i][0];
            int y = queries[i][1];
            int rad = queries[i][2]*queries[i][2];
            for(int j = 0; j<points.length; j++){
                if(((points[j][0]-x)*(points[j][0]-x)+(points[j][1]-y)*(points[j][1]-y))<=rad){
                    count++;
                }
            }
            result[i] = count;
        }
        return result;
    }
}

Result:
Runtime: 15 ms, faster than 95.02% of Java online submissions for Queries on Number of Points Inside a Circle.
Memory Usage: 39.7 MB, less than 51.86% of Java online submissions for Queries on Number of Points Inside a Circle.
