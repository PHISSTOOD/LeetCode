There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:
In each step, you will choose any 3 piles of coins (not necessarily consecutive). Of your choice, Alice will pick the pile with the maximum number of coins.
You will pick the next pile with maximum number of coins. Your friend Bob will pick the last pile. Repeat until there are no more piles of coins.
Given an array of integers piles where piles[i] is the number of coins in the ith pile. Return the maximum number of coins which you can have.

Solution description:
in this problem, we need to get the maximum number of coins we can have. Alice could get the max number in each combination, and Bob get the least. So all we should
do is to ensure we can get the second largest number in every new round. So, wo sort the array, after sorting, the new array are sorted from small to large. We need
to get the sum of those numbers in last 2/3 numbers which in the odd position.

class Solution {
    public int maxCoins(int[] piles) {
        Arrays.sort(piles);
        int result = 0;
        for(int i = 1;i<piles.length/3+1;i++){
            result += piles[piles.length-2*i];
        }
        return result;
    }
}

Runtime: 26 ms, faster than 83.27% of Java online submissions for Maximum Number of Coins You Can Get.
Memory Usage: 48.9 MB, less than 87.36% of Java online submissions for Maximum Number of Coins You Can Get.
