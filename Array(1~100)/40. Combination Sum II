Given a collection of candidate numbers (candidates) and a target number (target), 
find all unique combinations in candidates where the candidate numbers sums to target.
Each number in candidates may only be used once in the combination.

class Solution {
    List<List<Integer>> result =  new ArrayList<>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        find(candidates, new ArrayList<>(),target,0);
        return result;
        
    }
    private void find (int[] candidates, List<Integer> tempList, int target,int start)
    {
        int help=0;
        if(target==0)
        {
            result.add(new ArrayList<>(tempList));
            return;
        }
        for (int i = start; i < candidates.length; i++) 
        {
            if (candidates[i] > target) 
            {
                continue;
            }
            if(candidates[i] == help)
            {
                continue;
            }
            tempList.add(candidates[i]);
            find(candidates, tempList, target - candidates[i], i+1);
            help = tempList.get(tempList.size() - 1);
            tempList.remove(tempList.size() - 1);
        }
    }
}
