Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        stack = [("",0)]
        l = len(digits)
        result = []
        if not l:
            return result
        
        while stack:
            s, p = stack.pop()
            
            if p==l:
                result.append(s)
                continue
            
            if digits[p]=='7' or digits[p]=='9':
                n=4
            else:
                n=3
            
            carry = (digits[p]=='8' or digits[p]=='9')
            start = (ord(digits[p])-48-2)*3+carry
            
            for i in range(0,n):
                stack.append((s+chr(97+start), p+1))
                start+=1
        return result   
