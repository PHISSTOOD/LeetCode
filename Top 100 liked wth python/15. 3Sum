Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        result = set()
        for i in range(len(nums)-2):
            left = i+1
            right = len(nums)-1
            while left < right:
                if (nums[i] + nums[left] + nums[right])==0:
                    result.add((nums[i],nums[left],nums[right]))
                    left+=1
                    right-=1
                elif (nums[i] + nums[left] + nums[right])<0:
                    left += 1
                else:
                    right -= 1
        return result
