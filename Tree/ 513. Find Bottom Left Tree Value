Given the root of a binary tree, return the leftmost value in the last row of the tree.

Solution description:
In this problem, we need find the leftmost value in the last row, so the priority is level > left. So when we iterate a new node, 
if it's level is bigger than the current result, we need modify the result.
 
 
class Solution {
    public int result = 0;
    public int level = -1;
    public int findBottomLeftValue(TreeNode root) {
        if(root == null){
            return -1;
        }
        find(root,0);
        return result;
    }
    public void find(TreeNode root, int curLevel){
        if(root == null){
            return;
        }
        if(curLevel > level){
            level = curLevel;
            result = root.val;
        }
        find(root.left,curLevel+1);
        find(root.right,curLevel+1);
    }
}

Result:
Runtime: 0 ms, faster than 100.00% of Java online submissions for Find Bottom Left Tree Value.
Memory Usage: 38.4 MB, less than 85.25% of Java online submissions for Find Bottom Left Tree Value.
