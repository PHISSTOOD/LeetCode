You are given the root of a binary tree containing digits from 0 to 9 only.
Each root-to-leaf path in the tree represents a number.
For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.

class Solution {
    int result = 0;
    public int sumNumbers(TreeNode root) {
        if(root==null){
            return 0;
        }
        dfs(root,0);
        return result;
    }
    
    public void dfs(TreeNode node, int pre){
        pre = pre*10+node.val;
        if(node.left==null && node.right==null){
            result += pre;
            return;
        }
        if(node.left!=null){
            dfs(node.left,pre);
        }
        if(node.right!=null){
            dfs(node.right,pre);
        }
    }
}

Result:
Runtime: 0 ms, faster than 100.00% of Java online submissions for Sum Root to Leaf Numbers.
Memory Usage: 36.3 MB, less than 80.13% of Java online submissions for Sum Root to Leaf Numbers.
