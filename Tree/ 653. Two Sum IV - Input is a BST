Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.

Solution Description:
Traveerse the BST in pre-order and using a set to record the values in those nodes have been traveled. When we iterate a new node, judge if set contains k-val.

Code:
class Solution {
    boolean result = false;
    public boolean findTarget(TreeNode root, int k) {
        List<Integer> list = new ArrayList();
        Set<Integer> set = new HashSet();
        travel(root, set, k);
        return result;
    }
    
    public void travel(TreeNode root, Set<Integer> set, int k){
        if(root==null || result==true){
            return;
        }
        if(set.contains(k-root.val)){
            result = true;
            return;
        }else{
            set.add(root.val);
        }
        travel(root.left, set, k);
        travel(root.right, set, k);
    }
}

Result:
Runtime: 2 ms, faster than 97.13% of Java online submissions for Two Sum IV - Input is a BST.
Memory Usage: 39.9 MB, less than 68.84% of Java online submissions for Two Sum IV - Input is a BST.
