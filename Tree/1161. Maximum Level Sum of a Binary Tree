Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.
Return the smallest level x such that the sum of all the values of nodes at level x is maximal.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxLevelSum(TreeNode root) {
        List<Integer> values = new ArrayList();
        // traverse the nodes in the tree with its' level
        dfs(root, 0, values);
        // calculate the average
        int result = 1;
        int sum = Integer.MIN_VALUE;
        for(int i = 0; i<values.size();i++){
            if(values.get(i)>sum){
                sum = values.get(i);
                result = i+1;
            }
        }
        return result;
    }
    
    public void dfs(TreeNode node, int level, List<Integer> values){
        if(node==null){
            return;
        }
        if(level>values.size()-1){
            values.add(0);
        }
        values.set(level,values.get(level)+node.val);
        dfs(node.left, level+1, values);
        dfs(node.right, level+1, values);
    }
}

Result:
Runtime: 6 ms, faster than 97.22% of Java online submissions for Maximum Level Sum of a Binary Tree.
Memory Usage: 41.6 MB, less than 87.99% of Java online submissions for Maximum Level Sum of a Binary Tree.
