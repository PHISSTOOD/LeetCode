Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<Integer> result;
    int dis ;
    TreeNode tar;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        result = new ArrayList();
        dis = k;
        tar = target;
        dfs(root);
        return result;
    }
    
    public int dfs(TreeNode node){
        if(node==null){
            return -1;
        }else if(node==tar){
            addNode(node,0);
            return 1;
        }else{
            int left = dfs(node.left);
            int right = dfs(node.right);
            if(left==-1 && right ==-1){
                return -1;
            }else if(left==dis || right==dis){
                result.add(node.val);
                return -1;
            }else if(left!=-1){
                addNode(node.right,left+1);
                return left+1;
            }else{
                addNode(node.left,right+1);
                return right+1;
            }
        }
    }
    
    public void addNode(TreeNode node, int cur){
        if(node==null){
            return;
        }else if(cur==dis){
            result.add(node.val);
            return;
        }else{
            addNode(node.left,cur+1);
            addNode(node.right,cur+1);
            return;
        }
    }
}

Result:
Runtime: 14 ms, faster than 81.09% of Java online submissions for All Nodes Distance K in Binary Tree.
Memory Usage: 39.1 MB, less than 60.88% of Java online submissions for All Nodes Distance K in Binary Tree.
