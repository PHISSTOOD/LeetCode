Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. 
The formatted layout matrix should be constructed using the following rules:
The height of the tree is height and the number of rows m should be equal to height + 1.
The number of columns n should be equal to 2height+1 - 1.
Place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).
For each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1].
Continue this process until all the nodes in the tree have been placed.
Any empty cells should contain the empty string "".
Return the constructed matrix res
Solution Description:
1. We need to count the depth of the treem, thus we can know the width(how many items in each row).
2. Then we initialize the result list with depth and width.
3. Iterate all nodes in the tree and replace the calue in the result list.


Code:
class Solution {
    public int deep = 0;
    public List<List<String>> printTree(TreeNode root) {
        List<List<String>> result = new ArrayList();
        getDepth(root,1);
        int width = 1;
        for(int i = 0; i<deep; i++){
            width *= 2;
        }
        width--;
        for(int i = 0; i<deep; i++){
            List<String> cur = new ArrayList<>();
            for(int j = 0; j<width; j++){
                cur.add("");
            }
            result.add(cur);
        }
        helper(root, 0, width-1, result, 0);
        return result;
    }
    
    public void helper(TreeNode root, int start, int end, List<List<String>> result, int level){
        if(root==null){
            return;
        }
        int mid = (start+end)/2;
        result.get(level).set(mid, String.valueOf(root.val));
        helper(root.left, start, mid-1, result, level+1);
        helper(root.right, mid+1, end, result, level+1);
    }
    
    public void getDepth(TreeNode root, int level){
        if(root == null){
            return;
        }
        if(level>=deep){
            deep = level;
        }
        getDepth(root.left,level+1);
        getDepth(root.right,level+1);
    }
}

Result:
Runtime: 1 ms, faster than 99.67% of Java online submissions for Print Binary Tree.
Memory Usage: 40.8 MB, less than 9.78% of Java online submissions for Print Binary Tree.
