One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. 
If it is a null node, we record using a sentinel value such as #.
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.
Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree.
Find an algorithm without reconstructing the tree.
Each comma separated value in the string must be either an integer or a character '#' representing null pointer.
You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

class Solution {
    int pos = 0;
    public boolean isValidSerialization(String preorder) {
        String[] order = preorder.split(",");
        if(order.length<=0)
        {
            return false;
        }
        return valid(order) && pos==order.length;
    }
    private boolean valid(String[] order)
    {
        if(pos>=order.length)
        {
            return false;
        }
        if(order[pos].equals("#"))
        {
            pos++;
            return true;
        }else
        {
            pos++;
            boolean left = valid(order);
            boolean right = valid(order);
            return left&&right;
        }
    }
}

Runtime: 4 ms, faster than 93.94% of Java online submissions for Verify Preorder Serialization of a Binary Tree.
Memory Usage: 36.6 MB, less than 100.00% of Java online submissions for Verify Preorder Serialization of a Binary Tree.
