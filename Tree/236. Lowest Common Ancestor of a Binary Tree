Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between 
two nodes p and q as the lowest node in T that has both p and q as descendants 
(where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null || p==null || q==null)
        {
            return null;
        }
        return dfs(root,p,q);
    }
    private TreeNode dfs(TreeNode cur,TreeNode p,TreeNode q)
    {
        if(cur==p || cur==q)
        {
            return cur;
        }
        TreeNode left = null;
        TreeNode right = null;
        if(cur.left!=null)
        {
            left = dfs(cur.left,p,q);
        }
        if(cur.right!=null)
        {
            right = dfs(cur.right,p,q);
        }
        return ((left==null)?right:(right==null)?left:cur);
    }
}
