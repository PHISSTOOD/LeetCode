Given the root of a binary search tree (BST) and an integer target, 
split the tree into two subtrees where one subtree has nodes that are all smaller or equal to the target value, 
while the other subtree has all nodes that are greater than the target value.
It Is not necessarily the case that the tree contains a node with the value target.
Additionally, most of the structure of the original tree should remain. Formally,
for any child c with parent p in the original tree, if they are both in the same subtree after the split, then node c should still have the parent p.
Return an array of the two roots of the two subtrees.

class Solution {
    public TreeNode[] splitBST(TreeNode root, int target) {
        if(root==null){
            return new TreeNode[]{null, null};
        }else if(root.val<=target){
            TreeNode[] cur = splitBST(root.right, target);
            root.right = cur[0];
            return new TreeNode[]{root, cur[1]};
        }else{
            TreeNode[] cur = splitBST(root.left, target);
            root.left = cur[1];
            return new TreeNode[]{cur[0], root};
        }
    }
}

Result:
执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
内存消耗：36.8 MB, 在所有 Java 提交中击败了72.00%的用户
