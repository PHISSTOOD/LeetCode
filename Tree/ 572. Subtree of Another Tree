Given two non-empty binary trees s and t, 
check whether tree t has exactly the same structure and node values with a subtree of s. 
A subtree of s is a tree consists of a node in s and all of this node's descendants. 
The tree s could also be considered as a subtree of itself.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
        return traverse(s,t);
    }
    private boolean find(TreeNode ssub,TreeNode tsub)
    {
        if(ssub==null &&  tsub==null)
        {
            return true;
        }else if(ssub==null || tsub==null)
        {
            return false;
        }else if(ssub.val==tsub.val && find(ssub.left,tsub.left) && find(ssub.right,tsub.right))
        {
            return true;
        }
        return false;
    }
    private boolean traverse(TreeNode s,TreeNode t)
    {
        return s!=null && (find(s,t)||traverse(s.left,t)||traverse(s.right,t));
    }
}
