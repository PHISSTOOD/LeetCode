Serialization is the process of converting a data structure or object into a sequence of bits 
so that it can be stored in a file or memory buffer, 
or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary tree. 
There is no restriction on how your serialization/deserialization algorithm should work. 
You just need to ensure that a binary tree can be serialized to a string and this string 
can be deserialized to the original tree structure

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        preorder(root,sb);
        return sb.toString();
    }
    private void preorder(TreeNode root,StringBuilder sb)
    {
        if(root==null)
        {
            sb.append("n").append(",");
            return;
        }
        sb.append(root.val).append(",");
        preorder(root.left,sb);
        preorder(root.right,sb);
    }

    // Decodes your encoded data to tree.
    private int num = 0;
    public TreeNode deserialize(String data) {
        if (data == null || data.length() == 0) {
            return null;
        }
        String[] strElements = data.split(",");
        return createtree(strElements);
    }
    
    private TreeNode createtree(String[] s)
    {
        if(s[num].equals("n"))
        {
            num++;
            return null;
        }
        TreeNode cur = new TreeNode(Integer.valueOf(s[num]));
        num++;
        cur.left = createtree(s); 
        cur.right = createtree(s);
        
        return cur;
    }
}


Runtime: 8 ms, faster than 97.17% of Java online submissions for Serialize and Deserialize Binary Tree.
Memory Usage: 40.2 MB, less than 31.43% of Java online submissions for Serialize and Deserialize Binary Tree.


// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
