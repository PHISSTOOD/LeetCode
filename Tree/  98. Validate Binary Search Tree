Given a binary tree, determine if it is a valid binary search tree (BST).
Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root) {
        return valid(root, null,  null);
    }
    private boolean valid(TreeNode root, Integer low, Integer high)
    {
        if(root == null)
        {
            return true;
        }
        int num = root.val;
        if (low != null && num <= low) 
        {
            return false;
        }
        if (high != null && num >= high) 
        {
            return false;
        }
        if(!valid(root.left,low,num))
        {
            return false;
        }
        if(!valid(root.right,num,high))
        {
            return false;
        }
        return true;
    }
}
