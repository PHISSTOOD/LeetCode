Given a binary tree root and a linked list with head as the first node. 
Return True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return False.
In this context downward path means a path that starts at some node and goes downwards.

Solution:
class Solution {
    public boolean isSubPath(ListNode head, TreeNode root) {
        if(head==null){
            return true;
        }
        if(root==null){
            return false;
        }
        return subPath(head,head,root);
    }
    
    public boolean subPath(ListNode head,ListNode cur,TreeNode root){
        if(cur==null){
            return true;
        }
        if(root==null){
            return false;
        }
        boolean result = false;
        if(cur.val==root.val){
            result =  result || subPath(head,cur.next,root.left) || subPath(head,cur.next,root.right);
        }
        if(cur==head){
            result = result || subPath(head,head,root.left) || subPath(head,head,root.right);
        }
        return result;
    }
}

Result:
Runtime: 1 ms, faster than 99.50% of Java online submissions for Linked List in Binary Tree.
Memory Usage: 38.8 MB, less than 99.75% of Java online submissions for Linked List in Binary Tree.
